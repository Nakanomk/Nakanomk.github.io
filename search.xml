<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Weekly_002</title>
      <link href="/2025/06/23/Weekly-002.html"/>
      <url>/2025/06/23/Weekly-002.html</url>
      
        <content type="html"><![CDATA[<h1 id="期末考试"><a href="#期末考试" class="headerlink" title="期末考试"></a>期末考试</h1><p>这个礼拜开始进行期末考试，微积分用了三天进行速通，但是最后还是滑铁卢了，难泵</p><p>微积分当天伞被校车夹坏了，然后顶着大暴雨前往西区进行早八考试，最后果不其然的生病了</p><p>最近每天弦都是拉满的，希望后面仅剩的三科可以正常发挥。</p><h1 id="Microsoft-Todo"><a href="#Microsoft-Todo" class="headerlink" title="Microsoft Todo"></a>Microsoft Todo</h1><p>之前就觉得这个软件实在是太方便了，不仅能够快速的多段协同同步，还可以把每天的日程同步到 <code>Outlook</code> 上面，这样每天有什么事务只要一开机一定能看到。</p><p>使用这个软件进行了非常多的日程安排，希望一直到人生结束都能保持这个习惯。</p><h1 id="金属疲劳"><a href="#金属疲劳" class="headerlink" title="金属疲劳"></a>金属疲劳</h1><p>那位，如果你现在正在看的话，我感到很抱歉，我并没有想要欺骗你的感情，但是最后还是做出了伤害你的事。</p><p>我错得很彻底，太过于以自我为中心了，从来没有顾及你的感受。我悔恨没有及时想你表达心声，以至于你晚上那么晚了不睡觉还是希望维护我们之间的关系。</p><p>我当时并没有精力去经营一段感情了，没能和你说清楚，实在是很抱歉，没有能够切身体会你的痛苦，更让我感到非常的痛苦。这么多天以来在期末复习的同时，我无数次对自己做着谴责。我到底应该怎样面对你，我不知道，这个学期的加权也寄了，我当时应该和你说清楚我当时的处境，我应该让你也更加了解我。</p><p>这真的是我的第一次感情，我做的非常不好，严重的伤害了你，我感到非常抱歉，追悔莫及。</p><p>我共情的能力真的很差，我当时只知道自己做错了什么东西，但是说不清楚具体怎么做错的。想必如今再说这些也没什么用了，再过半个月我会向你道歉的。</p><p>最后是，我从来没有耍脾气试探你。你当时误会了。我那天晚上一直在说自己的心声。</p><h1 id="日后安排"><a href="#日后安排" class="headerlink" title="日后安排"></a>日后安排</h1><p>目前想去清华茶园并且学点技术。</p><p>这个学期最大的教训带来的反省就是人生不应该麻木。假如每天不能活出完满的自己，那么就相当于折寿。</p><p>生前何必追求安逸，追求安逸的话和死了有什么区别。</p>]]></content>
      
      
      <categories>
          
          <category> ~思想录~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly_001</title>
      <link href="/2025/05/29/Weekly-001.html"/>
      <url>/2025/05/29/Weekly-001.html</url>
      
        <content type="html"><![CDATA[<h1 id="入团考试"><a href="#入团考试" class="headerlink" title="入团考试"></a>入团考试</h1><p>上一周周末上了两天团课，这一周又进行了入团考试</p><p>感觉能及格，按导员的说法是最后按照加权得分和综合志愿时来评选出谁能当发展对象</p><p>看了一眼自己加权也不如别人，志愿时更是少得可怜</p><p>基本也就这样了，参加完了明年就不用考试了</p><h1 id="VJF作业补齐"><a href="#VJF作业补齐" class="headerlink" title="VJF作业补齐"></a>VJF作业补齐</h1><p>这个礼拜把 vjf 的作业都补齐了，可喜可贺可喜可贺</p><p>另外还交了大物作业和概率论作业，可以说是进度完全补齐</p><p>剩下的只需要把题刷了就可以了</p><h1 id="技术文档填坑"><a href="#技术文档填坑" class="headerlink" title="技术文档填坑"></a>技术文档填坑</h1><p>本周没有时间啊，，，马上就期末考试了</p><p>希望期末周能取得好成绩吧</p>]]></content>
      
      
      <categories>
          
          <category> ~思想录~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>monthlyReview_May25</title>
      <link href="/2025/05/23/monthlyReview-May25.html"/>
      <url>/2025/05/23/monthlyReview-May25.html</url>
      
        <content type="html"><![CDATA[<p>以后每个月都要做一次总结，用以端正自己的生活。</p><hr><h1 id="加权的烦恼"><a href="#加权的烦恼" class="headerlink" title="加权的烦恼"></a>加权的烦恼</h1><p>这个学期学习了不少算法，洛谷的也终于刷到了橙名（开心）但是正经要学习的课程还没怎么学习。马上就要期末月了，希望自己能够在剩下这点时间里快点把要学习的东西都学完。</p><h1 id="想做的项目"><a href="#想做的项目" class="headerlink" title="想做的项目"></a>想做的项目</h1><p>这一次主要是想要开发一个更加自由的课程表程序，为此还下载了 <code>Python</code> 和 <code>AnaConda</code> 这两个东西。希望后面忙完甲醛能有时间把这个项目也赶工出来。</p><p>计算机科学真是太有意思了。</p><h1 id="个人的成长"><a href="#个人的成长" class="headerlink" title="个人的成长"></a>个人的成长</h1><p>这个月的成长基本是停滞了。希望下个月能够比这个月更加成熟与高效。</p><p>今天把寝室打扫了一下，突然找到了很久之前那种活着的感觉，突然明白了一秒自己为什么努力活着。希望这种短暂的清醒能够在未来的生活里一直持续下去。</p><h1 id="技能的学习"><a href="#技能的学习" class="headerlink" title="技能的学习"></a>技能的学习</h1><p>这个月又精进了 <code>bfs</code> <code>dfs</code> <code>二分</code> <code>差分</code> <code>字符串</code> <code>数学</code> <code>数据结构</code> <code>动态规划</code> 相关的一些算法。但是都还不够深入，希望之后能够再刷更多的题。</p><p>这个月开始正式将算法自然地融入了学习的一部分，顺利地达成了第一场AK的线上赛。呱唧呱唧。</p><h1 id="未来的打算"><a href="#未来的打算" class="headerlink" title="未来的打算"></a>未来的打算</h1><ul><li>寝室卫生一定要好好搞啊</li><li>甲醛猛猛冲</li><li>对自己的时间有一定的规划</li><li>算法的学习也不能落下</li><li>这两天不要忘记学习英语</li></ul><hr><p>就先这样。</p>]]></content>
      
      
      <categories>
          
          <category> ~思想录~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPrimerPlus</title>
      <link href="/2025/05/23/CPrimerPlus.html"/>
      <url>/2025/05/23/CPrimerPlus.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近来开始重新阅读了上个学期自认为学完了的 <code>CPrimerPlus</code> 并且发现后面有好多很重要的东西当时并没有学习。</p><p>所以开了这个坑进行进一步学习的总结。日后有时间的话会逐渐填坑。前面没有填的一些坑也要继续填平。</p>]]></content>
      
      
      <categories>
          
          <category> ~万灵册~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RainOfLeben_002</title>
      <link href="/2025/04/19/RainOfLeben_002.html"/>
      <url>/2025/04/19/RainOfLeben_002.html</url>
      
        <content type="html"><![CDATA[<h1 id="Holy-you-God-of-Leben"><a href="#Holy-you-God-of-Leben" class="headerlink" title="Holy, you, God of Leben."></a>Holy, you, God of Leben.</h1><p>已经许久没有更新博客了，自己当时为什么要建立这个博客呢？后来又是怎么堕落下去的呢？已经无从得知了。但是不指望着这是最后一次堕落，因为如果承认了就是对命运的屈服，是一种“前面发生的事情已经没办法了，后面重新来过好了”的摆烂的心理而非一种豁达的心态。</p><p>应该想到的是日后再被这种情绪充斥的时候应该怎么及时拯救自己。</p><p>不能够认为自己做的事情是什么不能够挽回的丢人事，尤其是“丢人”这两个字。每一件事都是我由当下的状态递推之后会遇到的，假如这个时候觉得出岔子是不自然的行为就会让这个错误的状态方程一直递归下去。</p><p>正视自己人生中的每一件事，从来就没有什么智力与能力的天堑，对于每个人来说也并没有所谓的“神人时刻”，其实是每个人由前一个状态经过状态转移方程之后进入到下一个状态的过程。我们每个人都没有办法窥见人生的全貌，因为人生这个程序在世界里运行，它的空间太小了，永远不知道自己下一步会递归到哪里。所以说只要遵从贪心算法，调整自己的每一个状态，让它能够跳跃到下一个合理的状态就好了，就像麻将那样吧。</p><p><strong><em>注定要输的局想办法减小损失就足以令人开心，注定会赢的局赢得太少亦会让人沮丧吧。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> ~思想录~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dataStructureNotes</title>
      <link href="/2025/03/11/dataStructureNotes.html"/>
      <url>/2025/03/11/dataStructureNotes.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构笔记"><a href="#数据结构笔记" class="headerlink" title="数据结构笔记"></a>数据结构笔记</h1><div class="note info modern"><p>本笔记主要根据华中科技大学计算机学院数据结构教材记录</p><p>有些内容则出自严蔚敏老师的《数据结构》</p><p>中间可能会有些撕裂~</p></div><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="基本概念和定义"><a href="#基本概念和定义" class="headerlink" title="基本概念和定义"></a>基本概念和定义</h3><p><strong>数据</strong> 所有能进计算机的东西</p><p><strong>数据元素</strong> struct</p><p><strong>数据项</strong> struct里面的成员</p><p><strong>数据对象</strong> 由同类数据元素组成的集合</p><p><strong>数据结构</strong> 由数据元素组成的集合结构</p><ul><li>集合</li><li>线性结构</li><li>树状结构</li><li>图结构</li></ul><p><strong>存储结构</strong> 线性/非线性</p><p><strong>数据类型</strong> ElemType</p><p><strong>抽象数据类型</strong> ADT，约等于java里面的class</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ADT List &#123;</span><br><span class="line">数据对象：D</span><br><span class="line">数据关系：S</span><br><span class="line">操作P（约等于函数）</span><br><span class="line">&#125; ADT ADTName</span><br></pre></td></tr></table></figure><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>语句的执行次数叫做<strong>频度</strong></p><p>频度是一个和数据个数 <script type="math/tex">n</script> 相关的函数 <script type="math/tex">f(n)</script> </p><p>这个函数具有不同的阶数，基本分为 <script type="math/tex">O(1)\space O(n)\space O(n^2)\space O(logn)\space O(nlogn)\space O(2^n)</script> 等</p><p>满足 <script type="math/tex">O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3) < O(2^n)</script></p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>同上，递归函数基本是 <script type="math/tex">O(n)</script> </p><p>正常函数都是 <script type="math/tex">O(1)</script></p><p><strong>考试不常考</strong></p><h3 id="mathcal-Fibonacci-数列的一些算法"><a href="#mathcal-Fibonacci-数列的一些算法" class="headerlink" title="\mathcal{Fibonacci} 数列的一些算法"></a><script type="math/tex">\mathcal{Fibonacci}</script> 数列的一些算法</h3><h4 id="mathcal-Algorithm-space-I"><a href="#mathcal-Algorithm-space-I" class="headerlink" title="\mathcal{Algorithm\space I}"></a><script type="math/tex">\mathcal{Algorithm\space I}</script></h4><p>轮换计算单个项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fib1</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> f1 = <span class="number">1</span>, f2 = <span class="number">1</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n-- &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">        f = fi + f2;</span><br><span class="line">        f1 = f2;</span><br><span class="line">        f2 = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空间不随着 <script type="math/tex">n</script> 的改变而改变，空间复杂度为 $ O(n) $</p><h4 id="mathcal-Algorithm-space-II"><a href="#mathcal-Algorithm-space-II" class="headerlink" title="\mathcal{Algorithm\space II}"></a><script type="math/tex">\mathcal{Algorithm\space II}</script></h4><p> 计算之后用数组 $ f $ 保存前面 $ n $ 项</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fib2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> f[n] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        f[i] = f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于有保存，空间复杂度为 $ O(n) $</p><h4 id="mathcal-Algorithm-space-III"><a href="#mathcal-Algorithm-space-III" class="headerlink" title="\mathcal{Algorithm\space III}"></a><script type="math/tex">\mathcal{Algorithm\space III}</script></h4><p>使用递归</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fib3</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib3(n - <span class="number">1</span>) + fib3(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于递归，空间复杂度与树深度成正比，空间复杂度为 $ O(n) $ </p><h3 id="mathcal-BubbleSort-的一些算法"><a href="#mathcal-BubbleSort-的一些算法" class="headerlink" title="\mathcal{BubbleSort} 的一些算法"></a><script type="math/tex">\mathcal{BubbleSort}</script> 的一些算法</h3><h4 id="mathcal-Basic-space-Algorithm"><a href="#mathcal-Basic-space-Algorithm" class="headerlink" title="\mathcal{Basic\space Algorithm}"></a><script type="math/tex">\mathcal{Basic\space Algorithm}</script></h4><p>最基本的<strong><em>冒泡排序</em></strong>，通过一步步冒泡让目前剩余项里面的最大值“冒”出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble1</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) <span class="comment">// 冒第 i 项</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i; j--) <span class="comment">// 从头开始冒</span></span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; a[j + <span class="number">1</span>]) &#123; <span class="comment">// 这一段可以封装成swap函数</span></span><br><span class="line">                temp = a[j];</span><br><span class="line">                a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">                a[j - <span class="number">1</span>] = temp; &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]); <span class="comment">// 将排序后的数列打印出来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h4><p>首先，通过 <script type="math/tex">bubbleSort</script> 的思想锁定了它的时间复杂度必然是 <script type="math/tex">O(n^2)</script> </p><p>既然无法通过优化时间复杂度来优化算法，那么就可以通过 <strong>提前截断（Early Termination）</strong>来一定程度上优化算法执行的时间</p><p>接下来讨论如何提前截断</p><p>在冒泡的时候什么行为会浪费时间呢？假如剩下的所有元素都已有序，那么循环便可以提前截断，否则只是重复地检查了多次 “该数组已经被排序” 这一个事实。所以我们引入了一个变量来记录数组剩下的部分是否有序，这样来提前截断排序过程。</p><h4 id="mathcal-Optimized-space-Algorithm"><a href="#mathcal-Optimized-space-Algorithm" class="headerlink" title="\mathcal{Optimized\space Algorithm}"></a><script type="math/tex">\mathcal{Optimized\space Algorithm}</script></h4><p>以下是书上的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = n - <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> temp, change;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        change = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = a[j];</span><br><span class="line">                a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">                a[j - <span class="number">1</span>] = temp;</span><br><span class="line">                change = <span class="number">1</span>; &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span>(change &amp;&amp; --i &gt;= <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是我仿照基础的代码改的，也许可以更好地两相对比</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubble2</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> temp, change = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(change == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        change = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n - i; j++)</span><br><span class="line">            <span class="keyword">if</span>(a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                temp = a[j];</span><br><span class="line">                a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">                a[j - <span class="number">1</span>] = temp;</span><br><span class="line">                change = <span class="number">1</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分-mathcal-dichotomy"><a href="#二分-mathcal-dichotomy" class="headerlink" title="二分 \mathcal{dichotomy}"></a>二分 <script type="math/tex">\mathcal{dichotomy}</script></h3><p>问题：现在有 <script type="math/tex">A\space B</script> 两个正序数组，分别有 <script type="math/tex">m, n</script> 个元素，现在希望找出其中第 <script type="math/tex">k</script> 小的数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getKthElement</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> b[], <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> index1 = <span class="number">0</span>, index2 = <span class="number">0</span>;<span class="comment">//已经对比了的元素个数</span></span><br><span class="line">    <span class="type">int</span> c_A, c_B;<span class="comment">//最后一个被对比的元素下标</span></span><br><span class="line">    <span class="keyword">while</span>(k != <span class="number">1</span>) &#123;<span class="comment">//当剩下大于1个数没有被找到时</span></span><br><span class="line">        <span class="keyword">if</span>(index1 == m) <span class="keyword">return</span> B[index2 + k - <span class="number">1</span>];<span class="comment">//假如一边到头，直接返回另一个数组剩下的</span></span><br><span class="line">        <span class="keyword">if</span>(index2 == n) <span class="keyword">return</span> A[index1 + k - <span class="number">1</span>];</span><br><span class="line">        c_A = (index1 + k / <span class="number">2</span> &lt; m) ? (index1 + k / <span class="number">2</span> - <span class="number">1</span>) : (m - <span class="number">1</span>);<span class="comment">//防止越界</span></span><br><span class="line">        c_B = (index2 + k / <span class="number">2</span> &lt; n) ? (index2 + k / <span class="number">2</span> - <span class="number">1</span>) : (n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(A[c_A] &lt;= B[c_B]) &#123;<span class="comment">//对比哪边的数组被数了k/2个数字</span></span><br><span class="line">            k -= c_A - index1 + <span class="number">1</span>;<span class="comment">//将需要被找到的数字指标降低</span></span><br><span class="line">            index1 = c_A + <span class="number">1</span>;<span class="comment">//积累已经被对比的数字个数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            k -= c_B - index2 + <span class="number">1</span>;</span><br><span class="line">            index2 = c_B + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A[index1] &lt; B[index2] ? A[index1] : B[index2];<span class="comment">//k=1，接下来一个哪边小就返回哪个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 <script type="math/tex">O(logn)</script> ，空间复杂度 <script type="math/tex">O(1)</script>  </p><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="概念摘要"><a href="#概念摘要" class="headerlink" title="概念摘要"></a>概念摘要</h3><p><strong>数据项</strong> 线性表中的一个数据元素的成员</p><p><strong>记录</strong> 线性表中的一个数据元素</p><p><strong>文件</strong> 含有大量记录的线性表</p><p>ADT定义见书，在此不做赘述</p><h3 id="算法摘要"><a href="#算法摘要" class="headerlink" title="算法摘要"></a>算法摘要</h3><p>对于集合 <script type="math/tex">A, B</script> ，求集合 <script type="math/tex">A\cup B</script> 中的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">union</span><span class="params">(List &amp;La, List &amp;b)</span> &#123;</span><br><span class="line">    La_len = ListLength(La); Lb_len = ListLength(Lb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = i; i &lt; Lb_len; i++) &#123;</span><br><span class="line">        GetElem(Lb, i, e);</span><br><span class="line">        <span class="keyword">if</span>(!LocateElem(La, e, equal)) ListInsert(La, ++La_len, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>顺序存储结构的线性表完整定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxLength 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType elem[MaxLength];</span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//顺序表长度</span></span><br><span class="line">    <span class="type">int</span> last;<span class="comment">//最后一个变量的位置</span></span><br><span class="line">&#125; Sqlist;</span><br></pre></td></tr></table></figure><p>不难发现这里 <code>last</code>  其实和 <code>length</code> 是相关的，因此一般定义时只需要保留其中一个即可，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxLength 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType elem[MaxLength];</span><br><span class="line">    <span class="type">int</span> length;<span class="comment">//表长</span></span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><p>顺序存储结构的顺序表有以下的动态分配定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LIST_INIT_SIZE 100<span class="comment">//初始表长</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LISTINCREMENT 10 <span class="comment">//每次多分配的节点数量</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ELemType *elem;<span class="comment">//初始节点指针</span></span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">    <span class="type">int</span> listsize;</span><br><span class="line">&#125; SqList;</span><br></pre></td></tr></table></figure><h4 id="插入新元素"><a href="#插入新元素" class="headerlink" title="插入新元素"></a>插入新元素</h4><p>静态分配链表插入如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态分配顺序表插入算法，用引用参数表示被操作的线性表</span></span><br><span class="line">Status <span class="title function_">Insert</span><span class="params">(SqList *L, <span class="type">int</span> i, ELemType e)</span> &#123;</span><br><span class="line">    <span class="type">int</span> j;<span class="comment">//一个索引</span></span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>) <span class="keyword">return</span> ERROR;<span class="comment">//插入位置不在表里，返回错误</span></span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length &gt; MaxLength) <span class="keyword">return</span> OVERFLOW;<span class="comment">//插入后表长超过最大值，返回溢出</span></span><br><span class="line">    <span class="keyword">for</span>(j = L-&gt;length<span class="number">-1</span>; j &gt;= i - <span class="number">1</span>; j--)</span><br><span class="line">        L-&gt;elem[j+<span class="number">1</span>] = L-&gt;elem[j];</span><br><span class="line">    L-&gt;elem[i<span class="number">-1</span>] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动态</strong>分配链表插入如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态分配顺序表插入算法</span></span><br><span class="line">Status <span class="title function_">Insert</span><span class="params">(SqList *L, <span class="type">int</span> i, ElemType e)</span> &#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length + <span class="number">1</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;length &gt;= L-&gt;listsize) &#123;</span><br><span class="line">        ElemType *newbase;</span><br><span class="line">        newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, <span class="keyword">sizeof</span>(ElemType) * (L-&gt;listsize + LISTINCREMENT));</span><br><span class="line">        <span class="keyword">if</span>(newbase == <span class="literal">NULL</span>) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">        L-&gt;elem = newbase;</span><br><span class="line">        L-&gt;listsize += LISTINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(j = L-&gt;listsize - <span class="number">1</span>; j &gt;= i<span class="number">-1</span>; j--) </span><br><span class="line">        L-&gt;elem[j+<span class="number">1</span>] = L-&gt;elem[j];</span><br><span class="line">    L-&gt;elem[i<span class="number">-1</span>] = e;</span><br><span class="line">    L-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除新元素"><a href="#删除新元素" class="headerlink" title="删除新元素"></a>删除新元素</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//顺序表删除元素</span></span><br><span class="line">Status <span class="title function_">Delete</span><span class="params">(SqList &amp;L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L-&gt;length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= L-&gt;length<span class="number">-1</span>; j++)</span><br><span class="line">        L-&gt;elem[j<span class="number">-1</span>] = L-&gt;elem[j];</span><br><span class="line">    L-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>单个节点的声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    node* next; <span class="comment">// 自引用指针</span></span><br><span class="line">&#125; node, *Linklist;</span><br></pre></td></tr></table></figure><p>先进先出链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">addNode</span><span class="params">(linklist &amp;List)</span> &#123;</span><br><span class="line">    node a; <span class="comment">// 创建节点</span></span><br><span class="line">   tail-&gt;next = &amp;a;<span class="comment">// 如果从头添加的话就会无法从尾部删除，tail不知道倒数第二个</span></span><br><span class="line">    tail = &amp;a;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">delNode</span><span class="params">(linklist &amp;List, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    linklist p = head;</span><br><span class="line">    head = head-&gt;next; <span class="comment">// 因为要做成队列（FIFO），所以要尾插的话就要头删</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先进后出链表：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">addNode</span><span class="params">(linklist &amp;List)</span> &#123;</span><br><span class="line">    node a;</span><br><span class="line">    a.next = head; <span class="comment">//如果要做LIFO表，插入和删除必须是同一个方向，所以假如是尾插的话那么也要从尾部删除，不甚合理</span></span><br><span class="line">    head = &amp;a;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Status <span class="title function_">delNode</span><span class="params">(linklist &amp;List)</span> &#123;</span><br><span class="line">    linklist p;</span><br><span class="line">    head = p-&gt;next; <span class="comment">// 因为插入只能从头部插入，所以删除也只能从头部删除。</span></span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h3><h4 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">length</span><span class="params">(node *head)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    node *p;</span><br><span class="line">    p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p != head) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, p-&gt;data);</span><br><span class="line">        len++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><h4 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Dnode</span> &#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//每个节点的数据域</span></span><br><span class="line">    Dnode *prior, *next;<span class="comment">//前驱和后继节点指针</span></span><br><span class="line">&#125; Dnode, *DLList;</span><br></pre></td></tr></table></figure><h3 id="算法大合集"><a href="#算法大合集" class="headerlink" title="算法大合集"></a>算法大合集</h3><h4 id="递增有序单链表生成"><a href="#递增有序单链表生成" class="headerlink" title="递增有序单链表生成"></a>递增有序单链表生成</h4><p><strong>问题阐述</strong> 输入一列整数，以 0 为结束标志，生成递增有序单链表（不包括 0 ）。</p><h5 id="Algorithm-space-I-不带表头结点的"><a href="#Algorithm-space-I-不带表头结点的" class="headerlink" title="Algorithm \space I 不带表头结点的"></a><script type="math/tex">Algorithm \space I</script> 不带表头结点的</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">node* <span class="title function_">InsertList1</span><span class="params">(node *head, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    node *q = <span class="literal">NULL</span>;</span><br><span class="line">    node *p = head;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; e &gt; p-&gt;data) &#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node *f = (node *)<span class="built_in">malloc</span>(LENG);</span><br><span class="line">    f-&gt;data = e;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        f-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(q == <span class="literal">NULL</span>)</span><br><span class="line">            head = f;</span><br><span class="line">       <span class="keyword">else</span> q-&gt;next = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(q == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        f-&gt;next = p; head = f;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;f-&gt;next = p; q-&gt;next = f;&#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    node *head;</span><br><span class="line">    head = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    <span class="keyword">while</span>(e != <span class="number">0</span>) &#123;</span><br><span class="line">        head = InsertList1(head, e);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Algorithm-space-II-带表头节点的"><a href="#Algorithm-space-II-带表头节点的" class="headerlink" title="Algorithm \space II 带表头节点的"></a><script type="math/tex">Algorithm \space II</script> 带表头节点的</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">node * <span class="title function_">InsertListII</span><span class="params">(node *head, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    node *q = <span class="literal">NULL</span>;</span><br><span class="line">    node *p = head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; e&gt;p-&gt;data) &#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    node *f = (node *)<span class="built_in">malloc</span>(LENG);</span><br><span class="line">    f-&gt;data = e;</span><br><span class="line">    f-&gt;next = p; q-&gt;next = f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    node *head = (node *)<span class="built_in">malloc</span>(LENG);</span><br><span class="line">    head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> e;</span><br><span class="line">    <span class="keyword">while</span>(e != <span class="number">0</span>) &#123;</span><br><span class="line">        head = InsertList2(head, e);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表插入、删除算法"><a href="#单链表插入、删除算法" class="headerlink" title="单链表插入、删除算法"></a>单链表插入、删除算法</h4><h5 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">insert</span><span class="params">(Linklist L, <span class="type">int</span> i, ElemType e)</span> &#123;</span><br><span class="line">    node *p = L;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; j &lt; i) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    node *f = (node *)<span class="built_in">malloc</span>(LENG);</span><br><span class="line">    f-&gt;data = e;</span><br><span class="line">    f-&gt;next = p-&gt;next; p -&gt;next = f;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除-Algorithm-space-I"><a href="#删除-Algorithm-space-I" class="headerlink" title="删除 Algorithm \space I"></a>删除 <script type="math/tex">Algorithm \space I</script></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Delete</span><span class="params">(Linklist head, <span class="type">int</span> e)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(p &amp;&amp; p-&gt;data != e) &#123;</span><br><span class="line">        q = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p) &#123;</span><br><span class="line">        q-&gt;next = p-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">        <span class="keyword">return</span> YES;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除-Algorithm-space-II"><a href="#删除-Algorithm-space-II" class="headerlink" title="删除 Algorithm \space II"></a>删除 <script type="math/tex">Algorithm \space II</script></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Delete</span><span class="params">(Linklist L, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    node *p = L;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next &amp;&amp; j &lt; i) &#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || p-&gt;next == <span class="literal">NULL</span>)<span class="comment">//到表尾了也没有找到</span></span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    node *q = p-&gt;next;</span><br><span class="line">    p-&gt;next = q-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(q);<span class="comment">//别忘了free删掉的节点的内存</span></span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表合并算法"><a href="#单链表合并算法" class="headerlink" title="单链表合并算法"></a>单链表合并算法</h4><p>将两个带表头结点的有序单链表 La 和 Lb 合并为<strong>有序</strong>单链表 Lc， 该算法利用单链表的节点。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">mergeList</span><span class="params">(Linklist La, Linklist Lb, Linklist Lc)</span> &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">pa</span>, *<span class="title">pb</span>, *<span class="title">pc</span>;</span></span><br><span class="line">    pa = La-&gt;next;</span><br><span class="line">    pb = Lb-&gt;next;</span><br><span class="line">    pc = La;</span><br><span class="line">    <span class="built_in">free</span>(Lb);</span><br><span class="line">    <span class="keyword">while</span>(pa &amp;&amp; pb) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pa-&gt;data &lt;= pb-&gt;data) &#123;</span><br><span class="line">            pc-&gt;next = pa;</span><br><span class="line">            pc = pa;</span><br><span class="line">            pa = pa-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            pc-&gt;next = pb;</span><br><span class="line">            pc = pb;</span><br><span class="line">            pb = pb-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pa != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        pc-&gt;next = pa;</span><br><span class="line">        pa = pa-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pb != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        pc-&gt;next = pb;</span><br><span class="line">        pb = pb-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单链表的逆置"><a href="#单链表的逆置" class="headerlink" title="单链表的逆置"></a>单链表的逆置</h4><h5 id="Algorithm-space-I-递归"><a href="#Algorithm-space-I-递归" class="headerlink" title="Algorithm\space I 递归"></a><script type="math/tex">Algorithm\space I</script> 递归</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse1</span><span class="params">(Linklist L)</span> &#123;</span><br><span class="line">    Linklist p,q;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    p = L; q = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(q-&gt;next) &#123;</span><br><span class="line">        p = q;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    reverse1(L);</span><br><span class="line">    q-&gt;next = L-&gt;next;</span><br><span class="line">    L-&gt;next = q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Algorithm-space-II-递归"><a href="#Algorithm-space-II-递归" class="headerlink" title="Algorithm \space II 递归"></a><script type="math/tex">Algorithm \space II</script> 递归</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse2</span><span class="params">(Linklist L)</span> &#123;</span><br><span class="line">    Linklist p = L-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span> || p-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    L-&gt;next = p-&gt;next;</span><br><span class="line">    reverse2(L);</span><br><span class="line">    p-&gt;next-&gt;next = p;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Algorithm-space-III-折半与递归"><a href="#Algorithm-space-III-折半与递归" class="headerlink" title="Algorithm\space III  折半与递归"></a><script type="math/tex">Algorithm\space III</script>  折半与递归</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Linklist <span class="title function_">reverse3</span><span class="params">(Linklist L)</span> &#123;</span><br><span class="line">    node *p, *q;</span><br><span class="line">    <span class="keyword">if</span>(!L-&gt;next || !L-&gt;next-&gt;next)</span><br><span class="line">        <span class="keyword">return</span> L;</span><br><span class="line">    node* L1 = (node *)<span class="built_in">malloc</span>(LENG);</span><br><span class="line">    p = q = L;</span><br><span class="line">    <span class="keyword">while</span>(q) &#123;</span><br><span class="line">        q = q-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(q) &#123;</span><br><span class="line">            q = q-&gt;next;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    q = p-&gt;next;</span><br><span class="line">    L1-&gt;next = q;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    L = reverse3(L);</span><br><span class="line">    L1 = reverse3(L1);</span><br><span class="line">    q-&gt;next = L-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(L);</span><br><span class="line">    L = L1;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Algorithm-space-IV-优化算法"><a href="#Algorithm-space-IV-优化算法" class="headerlink" title="Algorithm \space IV 优化算法"></a><script type="math/tex">Algorithm \space IV</script> 优化算法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">reverse4</span><span class="params">(Linklist L)</span> &#123;</span><br><span class="line">    node *p, *q;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p) &#123;</span><br><span class="line">        q = p-&gt;next;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">        p = q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈-mathcal-LIFO"><a href="#栈-mathcal-LIFO" class="headerlink" title="栈 \mathcal{LIFO}"></a>栈 <script type="math/tex">\mathcal{LIFO}</script></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>进栈 push</strong> 向栈中插入一个元素</p><p><strong>出栈 pop</strong> 从栈删除一个元素</p><p><strong>栈顶</strong> 允许插入、删除元素的一端</p><p><strong>栈顶元素</strong> 处在栈顶位置的元素（表尾元素）</p><p><strong>栈底</strong> 不允许插入、删除元素的一端（表头）</p><p><strong>空栈</strong> 不含元素的栈</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><h4 id="顺序静态结构"><a href="#顺序静态结构" class="headerlink" title="顺序静态结构"></a>顺序静态结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态分配</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType elem[LENGTH];</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">&#125; SqStack;</span><br><span class="line">SqStack S;</span><br></pre></td></tr></table></figure><h4 id="顺序动态结构"><a href="#顺序动态结构" class="headerlink" title="顺序动态结构"></a>顺序动态结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态分配</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STACKINCREMENT 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ELemType *base;</span><br><span class="line">    <span class="type">int</span> top;</span><br><span class="line">    <span class="type">int</span> stacksize;</span><br><span class="line">&#125; SqStack;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InitStack</span><span class="params">(SqStack *S)</span> &#123;</span><br><span class="line">    S.base = (ElemType *)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    S.top = <span class="number">0</span>;</span><br><span class="line">    S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序栈方法"><a href="#顺序栈方法" class="headerlink" title="顺序栈方法"></a>顺序栈方法</h3><h4 id="进栈-mathcal-Push"><a href="#进栈-mathcal-Push" class="headerlink" title="进栈 \mathcal{Push}"></a>进栈 <script type="math/tex">\mathcal{Push}</script></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Push</span><span class="params">(SqStack *S, ElemType e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top &gt;= S.stacksize) &#123;<span class="comment">//动态栈的话</span></span><br><span class="line">        ElemType *newbase = (ElemType *)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span>(!newbase) &#123;</span><br><span class="line">            <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">        &#125;</span><br><span class="line">        S.base = newbase;</span><br><span class="line">        S.stacksize += STACKINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    S.base[S.top] = e;</span><br><span class="line">    S.top++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出栈-mathcal-Pop"><a href="#出栈-mathcal-Pop" class="headerlink" title="出栈 \mathcal{Pop}"></a>出栈 <script type="math/tex">\mathcal{Pop}</script></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Pop</span><span class="params">(SqStack &amp;S, ElemType &amp;e)</span> &#123;<span class="comment">//使用e来容纳pop出的数据</span></span><br><span class="line">    <span class="keyword">if</span>(S.top == <span class="number">0</span>) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">    S.top--;</span><br><span class="line">    e = S.base[top];</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式栈方法"><a href="#链式栈方法" class="headerlink" title="链式栈方法"></a>链式栈方法</h3><h4 id="链式栈结构"><a href="#链式栈结构" class="headerlink" title="链式栈结构"></a>链式栈结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里的基本结构我加了两个自定义的名称</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Unit, *StackNode, *top = <span class="literal">NULL</span>;<span class="comment">//初始化置top为空栈</span></span><br></pre></td></tr></table></figure><h4 id="链式栈的-mathcal-Push-方法"><a href="#链式栈的-mathcal-Push-方法" class="headerlink" title="链式栈的 \mathcal{Push} 方法"></a>链式栈的 <script type="math/tex">\mathcal{Push}</script> 方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StackNode <span class="title function_">Push_link</span><span class="params">(StackNode top, ElemType e)</span> &#123;<span class="comment">//本质上是对链表做了头插</span></span><br><span class="line">    StackNode *p;</span><br><span class="line">    <span class="type">int</span> length = <span class="keyword">sizeof</span>(Unit);</span><br><span class="line">    p = (StackNode)<span class="built_in">malloc</span>(length);</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = top;</span><br><span class="line">    top = p;</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式栈的-mathcal-Pop-方法"><a href="#链式栈的-mathcal-Pop-方法" class="headerlink" title="链式栈的 \mathcal{Pop} 方法"></a>链式栈的 <script type="math/tex">\mathcal{Pop}</script> 方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">StackNode <span class="title function_">Pop_link</span><span class="params">(StackNode top, ElemType *e)</span> &#123;<span class="comment">//本质是对链表做了头删</span></span><br><span class="line">    StackNode p;</span><br><span class="line">    <span class="keyword">if</span>(top == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p = top;</span><br><span class="line">    (*e) = p-&gt;data;</span><br><span class="line">    top = top-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><h4 id="数值转换"><a href="#数值转换" class="headerlink" title="数值转换"></a>数值转换</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * <span class="title function_">base_convert</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> base)</span> &#123;</span><br><span class="line">    SqStack S; <span class="type">int</span> e; InitStack(S);</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>) &#123;</span><br><span class="line">        Push(S, x % base);</span><br><span class="line">        x /= base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> * res = (<span class="type">char</span> *)<span class="built_in">malloc</span>((S.top + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *e = &amp;i;</span><br><span class="line">    <span class="keyword">while</span>(Pop(S, e) == OK)</span><br><span class="line">        res[i++] = (<span class="type">char</span>)e + <span class="number">48</span>;</span><br><span class="line">    res[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">bracket_match</span><span class="params">(<span class="type">char</span> brackets[])</span> &#123;</span><br><span class="line">    SqStack S;</span><br><span class="line">    ElemType e;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(brackets); i++) &#123;</span><br><span class="line">        <span class="type">char</span> c = brackets[i], x;</span><br><span class="line">        <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;)&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(Pop(S, x) == OK &amp;&amp; x == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;]&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span>(Pop(S, x) == OK &amp;&amp; x == <span class="string">&#x27;[&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">                <span class="comment">//...</span></span><br><span class="line">            dafault:</span><br><span class="line">                Push(S, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> StackEmpty(S);<span class="comment">//判断栈是否为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h4><p>运算符优先级关系表（其中 <code>#</code> 用来标记程序是否运行完毕） </p><div class="table-container"><table><thead><tr><th style="text-align:center">S1\S2</th><th style="text-align:center">+</th><th style="text-align:center">-</th><th style="text-align:center">*</th><th style="text-align:center">/</th><th style="text-align:center">(</th><th style="text-align:center">)</th><th style="text-align:center">#</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">(</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">=</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">)</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td><td style="text-align:center"></td><td style="text-align:center">&gt;</td><td style="text-align:center">&gt;</td></tr><tr><td style="text-align:center">#</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center">&lt;</td><td style="text-align:center"></td><td style="text-align:center">=</td></tr></tbody></table></div><p>上表中，左侧代表第一个符号，上方代表第二个符号。由以上的关系可以得到下方的表达式求值方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">eval</span><span class="params">(<span class="type">char</span> *s)</span> &#123;</span><br><span class="line">    SqStack_Int s1;</span><br><span class="line">    SqStack_Char s2;</span><br><span class="line">    InitStack(s1); InitStack(s2);</span><br><span class="line">    <span class="type">int</span> i = <span class="number">-1</span>, result;</span><br><span class="line">    Push(s2, s[++i]);</span><br><span class="line">    <span class="type">char</span> w = s[++i], e;</span><br><span class="line">    <span class="keyword">while</span>(w != <span class="string">&#x27;#&#x27;</span> || GetTop(s2, e) == OK &amp;&amp; e != <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span> &lt;= w &amp;&amp; w &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line"><span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= w &amp;&amp; w &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + (w - <span class="string">&#x27;0&#x27;</span>); w = s[++i];</span><br><span class="line">            &#125;</span><br><span class="line">            Push(s1, num);<span class="comment">//压入数字栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        GetTop(s2, e); <span class="type">int</span> res = prior(e, w);<span class="comment">//依靠上面的表判断那个符号优先级大</span></span><br><span class="line">        <span class="keyword">if</span>(res == <span class="number">-1</span>) Push(s2, w); w = s[++i];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">0</span> &amp;&amp; w == <span class="string">&#x27;)&#x27;</span>) Pop(s2, e); w = s[++i];<span class="comment">//优先级等于w，去括号</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(res == <span class="number">1</span>) &#123;<span class="comment">//鹅嘞神，你这都比w优先级大了，赶紧计算</span></span><br><span class="line">            <span class="type">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;<span class="comment">//准备两个运算数存储位置</span></span><br><span class="line">            Pop(s2, e); Pop(s1, b);Pop(s1, a);<span class="comment">//注意这里先出的是b，因为栈是LIFO表</span></span><br><span class="line">            <span class="keyword">switch</span>(e) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: Push(s1, a+b); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: Push(s1, a-b); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: Push(s1, a*b); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>: Push(s1, a/b); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    GetTop(s1, result); <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用来判断符号优先级大小的函数，因为纯纯队史所以我只是抄来看看，并没有什么大用</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">prior</span><span class="params">(<span class="type">char</span> a, <span class="type">char</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="string">&#x27;+&#x27;</span> || a == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="string">&#x27;*&#x27;</span> || b == <span class="string">&#x27;/&#x27;</span> || b == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="string">&#x27;*&#x27;</span> || a == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="string">&#x27;(&#x27;</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b == <span class="string">&#x27;#&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="string">&#x27;)&#x27;</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p><strong>空队列</strong> 不含元素的队列</p><p><strong>队首</strong> 队列中只允许删除元素的一端。一般称为 <strong><em>front</em></strong> 或 <strong><em>head</em></strong></p><p><strong>队尾</strong> 队列中只允许插入元素的一端。一般称为 <strong><em>rear</em></strong> 或 <strong><em>tail</em></strong></p><p><strong>队首元素</strong> 处于队首的元素</p><p><strong>队尾元素</strong> 处于队尾的元素</p><p><strong>进队</strong> 插入一个元素到队列中。也称为入队</p><p><strong>出队</strong> 从队列中删除一个元素</p><h3 id="顺序基本结构"><a href="#顺序基本结构" class="headerlink" title="顺序基本结构"></a>顺序基本结构</h3><h4 id="静态顺序存储结构"><a href="#静态顺序存储结构" class="headerlink" title="静态顺序存储结构"></a>静态顺序存储结构</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLENGTH 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ELemType elem[MAXLENGTH];</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">&#125; SeQueue;</span><br><span class="line">SeQueue Q;<span class="comment">//定义一个结构变量Q表示队列</span></span><br></pre></td></tr></table></figure><h4 id="动态顺序存储结构（书上没提，照猫画虎）"><a href="#动态顺序存储结构（书上没提，照猫画虎）" class="headerlink" title="//动态顺序存储结构（书上没提，照猫画虎）"></a>//动态顺序存储结构（书上没提，照猫画虎）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLENGTH 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INCREMENT 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    ElemType *elem;</span><br><span class="line">    <span class="type">int</span> front, rear;</span><br><span class="line">&#125; SeQueue;</span><br></pre></td></tr></table></figure><h3 id="顺序队列方法"><a href="#顺序队列方法" class="headerlink" title="顺序队列方法"></a>顺序队列方法</h3><h4 id="入队-En-Queue"><a href="#入队-En-Queue" class="headerlink" title="入队 En\_Queue"></a>入队 <script type="math/tex">En\_Queue</script></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">En_Queue</span><span class="params">(SqQueue &amp;Q, ElemType e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>((Q.rear + <span class="number">1</span>) % MAXLENGTH == Q.front) <span class="keyword">return</span> OVERFLOW;</span><br><span class="line">    Q.elem[Q.rear] = e;</span><br><span class="line">    Q.rear++;</span><br><span class="line">    Q.rear %= MAXLENGTH;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出队-De-Queue"><a href="#出队-De-Queue" class="headerlink" title="出队 De\_Queue"></a>出队 <script type="math/tex">De\_Queue</script></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">De_Queue</span><span class="params">(SqQueue &amp;Q, ElemType e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear) <span class="keyword">return</span> ERROR;<span class="comment">//队列为空</span></span><br><span class="line">    e = Q.elem[Q.front];</span><br><span class="line">    Q.front = (Q.front + <span class="number">1</span>) % MAXLENGTH;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><h4 id="存放元素的节点类型定义"><a href="#存放元素的节点类型定义" class="headerlink" title="存放元素的节点类型定义"></a>存放元素的节点类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span> &#123;</span></span><br><span class="line">    ELemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Qnode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Qnode, *QnodePtr;</span><br></pre></td></tr></table></figure><h4 id="由头尾元素构成的链表基本定义"><a href="#由头尾元素构成的链表基本定义" class="headerlink" title="由头尾元素构成的链表基本定义"></a>由头尾元素构成的链表基本定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Qnode *front;</span><br><span class="line">    Qnode *rear;</span><br><span class="line">&#125; LinkQueue;</span><br></pre></td></tr></table></figure><h4 id="空队列生成方法"><a href="#空队列生成方法" class="headerlink" title="空队列生成方法"></a>空队列生成方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH sizeof(Qnode)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InitQueue</span><span class="params">(LinkQueue Q)</span> &#123;</span><br><span class="line">    Q.front = Q.rear = (QueuePtr)<span class="built_in">malloc</span>(LENGTH);</span><br><span class="line">    Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列插入方法"><a href="#队列插入方法" class="headerlink" title="队列插入方法"></a>队列插入方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(LinkQueue &amp;Q, ElemType e)</span> &#123;</span><br><span class="line">    Qnode *p = (Qnoode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LENGTH));</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ERROR;</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next = p;</span><br><span class="line">    Q.rear = p;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="队列删除算法"><a href="#队列删除算法" class="headerlink" title="队列删除算法"></a>队列删除算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(LinkQueue &amp;Q, ElemType e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear) <span class="keyword">return</span> ERROR;</span><br><span class="line">    Queue *p = Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == p) Q.rear = Q.front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的应用实例"><a href="#栈的应用实例" class="headerlink" title="栈的应用实例"></a>栈的应用实例</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><blockquote><p>现在有一种简易的编码规则为 k[encoded_string] ，它表示方括号内部的 encoded_string 刚好重复 k 次、</p><p>例如，字符串 2[ab]3[c]def 表示的字符串是 ababcccdef</p><p>另外，这种编码允许嵌套，解码的时候需要由左向右，由内到外进行嵌套。</p><p>例如，字符串 3[a2[bc]]2[d] 表示的字符串是 abcbcabcbcabcbcdd</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Decoder */</span></span><br><span class="line"><span class="built_in">string</span> <span class="title function_">decode</span><span class="params">(<span class="built_in">string</span> str)</span> &#123;</span><br><span class="line">    SqStack_Int s1;</span><br><span class="line">    SqStack_String s2;</span><br><span class="line">    InitStack(s1); InitStack(s2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> ch = str[i];</span><br><span class="line">        <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                ch = str[++i];</span><br><span class="line">            &#125;</span><br><span class="line">            Push(s1, num);</span><br><span class="line">            i--;<span class="comment">//退出非数字字符</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isalpha</span>(ch)) &#123;</span><br><span class="line">            Push(s2, <span class="built_in">string</span>(<span class="number">1</span>, ch));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ch == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            Pop(s1, num);</span><br><span class="line">            <span class="built_in">string</span> top = <span class="string">&quot;&quot;</span>, tmp = <span class="string">&quot;&quot;</span>, repeat = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">while</span>(Pop(s2, top) &amp;&amp; top != <span class="string">&quot;[&quot;</span>) tmp = top + tmp;<span class="comment">//利用字符串加法反置串</span></span><br><span class="line">            <span class="keyword">while</span>(num--) repeat += tmp;</span><br><span class="line">            Push(s2, repeat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">&quot;&quot;</span>, tmp = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span>(Pop(s2, tmp)) res = tmp + res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="队列的应用实例"><a href="#队列的应用实例" class="headerlink" title="队列的应用实例"></a>队列的应用实例</h3><h4 id="银行排队叫号系统"><a href="#银行排队叫号系统" class="headerlink" title="银行排队叫号系统"></a>银行排队叫号系统</h4><blockquote><p>问题背景：在银行办理业务时，客户依次取号进入客户队列排队，然后根据银行广播提示，到指定的空闲窗口办理业务。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Customer</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> index;<span class="comment">//序号</span></span><br><span class="line">    <span class="type">int</span> window;<span class="comment">//窗口</span></span><br><span class="line">    <span class="type">int</span> time;<span class="comment">//模拟时长</span></span><br><span class="line">&#125; Customer;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bank_service</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> serviceTime)</span> &#123;</span><br><span class="line">    LinkQueue wait_queue; InitQueue(wait_queue);</span><br><span class="line">    Customer *windows[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) windows[i] = (Customer *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Customer));</span><br><span class="line">    <span class="type">int</span> windowsStatus[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) windows_status[i] = <span class="number">0</span>;<span class="comment">//可以用memset</span></span><br><span class="line">    <span class="type">int</span> idx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">0</span>; t &lt; serviceTime || !QueueEmpty(wait_queue) || !AllWindowsEmpty; t++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;time now: %d\n&quot;</span>, t);</span><br><span class="line">        <span class="keyword">if</span>(t &lt; service) &#123;</span><br><span class="line">            <span class="keyword">if</span>(rand() % (<span class="number">1</span> + n)) &#123;<span class="comment">//客户以 n / (n+1) 的概率到达</span></span><br><span class="line">                Customer c; c.index = ++idx;</span><br><span class="line">                c.time = <span class="number">1</span> + rand() % <span class="number">5</span>;</span><br><span class="line">                EnQueue(wait_queue, c);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d 号客户入队，模拟时长为%d\n&quot;</span>, idx, c.time);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(WindowsStatus[i]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(--windows[i]-&gt;time &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d 号客户离开窗口%d&quot;</span>, windows[i]-&gt;index, windows[i]-&gt;window);</span><br><span class="line">                    WindowsStatus[i] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!WindowsStatus[i] &amp;&amp; !QueueEmpty(wait_queue)) &#123;</span><br><span class="line">                DeQueue(wait_queue, *windows[i]);</span><br><span class="line">                windows[i]-&gt;window = i+<span class="number">1</span>; windowsStatus[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;请 %d 号客户到 %d 号窗口办理业务&quot;</span>, windows[i]-&gt;index, windows[i]-&gt;window);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">free</span>(windows[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p> <strong>字符串</strong> 由零个或者多个字符组成的有限序列，一般记为 $ S = \space “a_1 \space a_2 \space a_3 …a_n” $</p><p><strong>串值</strong> 双引号内的内容</p><p><strong>串长</strong> n 的大小</p><p><strong>空串</strong> n = 0</p><p><strong>空格串</strong> 仅含若干空格的字符串</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><h4 id="静态存储分配的字符串"><a href="#静态存储分配的字符串" class="headerlink" title="静态存储分配的字符串"></a>静态存储分配的字符串</h4><p>也被称为串的<strong>定长顺序存储表示</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAXLENGTH 256</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> SeqString[MAXLENGTH];</span><br><span class="line">SeqString S;</span><br></pre></td></tr></table></figure><p>这个时候可能有人要问了，主播主播，你这个有点太简单了，我们数据结构应该实现的东西不是应该都非常具有结构吗？</p><p>有的，结构我们是有的，毕竟我们在这本书里已经学过了 <strong>顺序表</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ch[MAXLENGTH];</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; SeqString;</span><br></pre></td></tr></table></figure><h4 id="动态存储分配的字符串"><a href="#动态存储分配的字符串" class="headerlink" title="动态存储分配的字符串"></a>动态存储分配的字符串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *ch;</span><br><span class="line">    <span class="type">int</span> length;</span><br><span class="line">&#125; HString;</span><br></pre></td></tr></table></figure><h4 id="串的链式存储"><a href="#串的链式存储" class="headerlink" title="串的链式存储"></a>串的链式存储</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkStrNode, *LinkString;</span><br></pre></td></tr></table></figure><p>在这里引入存储密度的概念，其公式为：</p><script type="math/tex; mode=display">\rho = \frac{StringUnit}{ActualUnit} \times 100\%</script><p>因此如果按以上的方式存储字符串，那么存储的无用信息比有用的还多，那就很神人了。</p><p>怎么提升这个存储密度呢？在一个节点里多塞几个信息就完了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NODESIZE 4</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> data[NODESIZE];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; LinkStrNode, *LinkString;</span><br></pre></td></tr></table></figure><p>这时候字符串增添啥的岂不是很麻烦啊！没事，反正也不用这种方式做算法~大模拟会写就完了</p><h3 id="字符串的模式匹配算法"><a href="#字符串的模式匹配算法" class="headerlink" title="字符串的模式匹配算法"></a>字符串的模式匹配算法</h3><h4 id="朴素的模式匹配算法"><a href="#朴素的模式匹配算法" class="headerlink" title="朴素的模式匹配算法"></a>朴素的模式匹配算法</h4><p>比较简单粗暴，大不了就一个一个字母进行比较嘛~怎么确定这个字符串完整的出现过了？从第一位开始一个一个比较就可以了，总体的一个一个比较需要拿另一个 index 来存储</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">StrIndex</span><span class="params">(SeqString S, SeqString T, <span class="type">int</span> pos)</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = pos, j = <span class="number">1</span>; i &lt;= S[<span class="number">0</span>] - T[<span class="number">0</span>] + <span class="number">1</span>;i++, j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i] != T.ch[j]) &#123;<span class="comment">//完蛋，居然不一样</span></span><br><span class="line">            i = i - j + <span class="number">1</span>;<span class="comment">//外层index回到之前的位置</span></span><br><span class="line">            j = <span class="number">0</span>;<span class="comment">//内层index置0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(j == T.ch[<span class="number">0</span>]) <span class="keyword">return</span> i-j+<span class="number">1</span>;<span class="comment">//匹配位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//没找到啊？？</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="KMP模式匹配算法"><a href="#KMP模式匹配算法" class="headerlink" title="KMP模式匹配算法"></a>KMP模式匹配算法</h4><p>不难发现，前面那个算法会导致每次一遇到不一样的就得回滚，实在是太麻烦了我天。那么有没有匹配的时候还能够灵活的调整匹配区间的算法呢？</p><p>假如一个字符串里面某个位置和前缀的某些元素相同，那么我可以通过存下相同前缀的位置来减少回滚的长度。</p><p>例如 ababc 这个字符串，不难发现abab里面都有 ab，那么遇到不一样的字符时可以首先考虑<strong>一直到对比位置的前缀相同位置是否都符合条件</strong>，以此来减少滚动长度。</p><p>我们完全可以通过另外保存一个数组来实现这个功能，即记录下当前字符串位置的前缀相同位置。</p><p>不妨将这个新的由位置组成的顺序表视作一个串，将其命名为<strong>next</strong></p><div class="table-container"><table><thead><tr><th>Position j</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>ModeString</td><td>a</td><td>b</td><td>a</td><td>b</td><td>c</td></tr><tr><td>next[j]</td><td>0</td><td>1</td><td>1</td><td>2</td><td>1</td></tr></tbody></table></div><p>其中 <script type="math/tex">next</script> 数组应该满足</p><script type="math/tex; mode=display">next_j = k \Leftrightarrow t_1t_2t_3...t_k = t_{j-k+1}t_{j-k+2}t_{j-k+3}...t_{j}</script><p>这个 next 数组怎么求呢？</p><h3 id="基于不同存储类型实现的一些其它字符串方法"><a href="#基于不同存储类型实现的一些其它字符串方法" class="headerlink" title="基于不同存储类型实现的一些其它字符串方法"></a>基于不同存储类型实现的一些其它字符串方法</h3><h4 id="串插入方法"><a href="#串插入方法" class="headerlink" title="串插入方法"></a>串插入方法</h4><h4 id="串比较方法"><a href="#串比较方法" class="headerlink" title="串比较方法"></a>串比较方法</h4><h4 id="串赋值算法"><a href="#串赋值算法" class="headerlink" title="串赋值算法"></a>串赋值算法</h4><h4 id="求子串方法"><a href="#求子串方法" class="headerlink" title="求子串方法"></a>求子串方法</h4><h4 id="串联接方法"><a href="#串联接方法" class="headerlink" title="串联接方法"></a>串联接方法</h4><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h2 id="图（结构）"><a href="#图（结构）" class="headerlink" title="图（结构）"></a>图（结构）</h2><h2 id="图的最小生成树问题"><a href="#图的最小生成树问题" class="headerlink" title="图的最小生成树问题"></a>图的最小生成树问题</h2><h2 id="图的最短路径问题"><a href="#图的最短路径问题" class="headerlink" title="图的最短路径问题"></a>图的最短路径问题</h2><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2>]]></content>
      
      
      <categories>
          
          <category> ~万灵册~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HowToUseSteamCommunity</title>
      <link href="/2025/02/09/HowToUseSteamCommunity.html"/>
      <url>/2025/02/09/HowToUseSteamCommunity.html</url>
      
        <content type="html"><![CDATA[<h1 id="Steam-社区-amp-amp-其他服务型网站访问指南"><a href="#Steam-社区-amp-amp-其他服务型网站访问指南" class="headerlink" title="Steam 社区 &amp;&amp; 其他服务型网站访问指南"></a>Steam 社区 &amp;&amp; 其他服务型网站访问指南</h1><div class="note info modern"><p>本教程主要为 Windows 系统编写。欲访问Steam之外的其他服务，请直接遵循  $ \mathscr{B} $ <em>UsbEAm Hosts Editor 操作指南</em> </p><p>对于 Windows 11 系统，如果你右键找不到对应的选项，请点击 <code>右键菜单</code> 中的 <code>显示更多选项</code>。</p></div><h2 id="mathscr-A-Steam-访问-Steamcommunity"><a href="#mathscr-A-Steam-访问-Steamcommunity" class="headerlink" title="$ \mathscr{A} $ Steam 访问 // Steamcommunity"></a>$ \mathscr{A} $ Steam 访问 // Steamcommunity</h2><h3 id="Steamcommunity-介绍"><a href="#Steamcommunity-介绍" class="headerlink" title="Steamcommunity 介绍"></a>Steamcommunity 介绍</h3><p>Steamcommunity 是由羽翼城大佬开发的代理软件，可以用来解决许多网站的访问问题</p><p>详情请戳 $ \Rightarrow $ <strong><a href="https://www.dogfight360.com/blog/">羽翼城|Dogfight360佬的个人博客</a></strong></p><h3 id="Steamcommunity-下载"><a href="#Steamcommunity-下载" class="headerlink" title="Steamcommunity 下载"></a>Steamcommunity 下载</h3><h4 id="Step-I-下载压缩包"><a href="#Step-I-下载压缩包" class="headerlink" title="Step I 下载压缩包"></a><em>Step I</em> 下载压缩包</h4><p>请戳 $ \Rightarrow $ <a href="https://www.dogfight360.com/blog/wp-content/uploads/2024/11/steamcommunity_302_V12.1.46_%E8%A7%A3%E5%8E%8B%E5%AF%86%E7%A0%81dogfight360.zip">Steamcommunity 软件下载</a></p><div class="note info modern"><p>如果你的浏览器弹出了保存文件的窗口，请将它保存到一个C盘以外的文件夹内，例如 D:\Steamcommunity</p></div><h4 id="Step-II-解压压缩包"><a href="#Step-II-解压压缩包" class="headerlink" title="Step II 解压压缩包"></a><em>Step II</em> 解压压缩包</h4><blockquote><p>如果你不知道压缩包是什么，它是一类以 <code>.zip</code> <code>.rar</code> <code>.7z</code> 等字段结尾的文件，是对原始文件进行压缩操作之后得到的文件，在使用之前需要对它们进行解压操作。你刚刚下载的文件就是一个压缩包</p></blockquote><p>欲进行解压操作，你的电脑首先需要一个解压缩软件，如果你的电脑上没有解压缩软件，那么我推荐安装 <strong>BandiZip</strong>。win10以上的电脑可以直接在微软商店里进行安装。</p><p>安装好解压软件，一个比较简单的做法是，<strong>找到你刚刚下载到电脑上的文件</strong>（如果你的浏览器下载的时候没有提示下载位置，那么它就在你的浏览器下载器指示的位置；如果你刚刚选定了一个文件夹，那么它就在刚刚你选定的文件夹里）</p><p>之后 <strong>双击打开你下载的文件</strong> ，这时会打开你的解压缩软件，之后鼠标左键选中里面的 <code>steamcommunity_302</code> 文件夹。之后同时按下你键盘上的 <code>Ctrl</code> 和 <code>C</code> 键，即可复制该文件夹。</p><p>下一步，你的软件会弹出一个密码输入框，提示你该文件被密码保护。</p><p>请在密码输入框内输入 <strong>dogfight360</strong> ，注意大小写都不能错，不必在意我的粗体表示。</p><p><strong>恭喜你</strong> 这个软件就已经被复制下来了。做到这一步你已经离成功下载这个软件不远了。假如它没有被复制上，请你再 <code>Ctrl+C</code> 一次（不同解压软件之间有点差异）</p><p>现在回到你压缩包所在的文件夹，同时按下你键盘上的 <code>Ctrl</code> 键和 <code>V</code> 键，如果你看到文件夹里出现了刚才的 <code>steamcommunity_302</code> 文件夹，那么恭喜你成功解压了刚刚下载的文件夹。</p><h3 id="Steamcommunity-配置"><a href="#Steamcommunity-配置" class="headerlink" title="Steamcommunity 配置"></a>Steamcommunity 配置</h3><div class="note info modern"><p>以下操作请左键双击打开 <code>steamcommunity_302</code> 文件夹进行</p></div><h4 id="Step-I-初始化-Steamcommunity"><a href="#Step-I-初始化-Steamcommunity" class="headerlink" title="Step I 初始化 Steamcommunity"></a><em>Step I</em> 初始化 Steamcommunity</h4><p>右键文件夹里红色图标的 <code>steamcommunity302.exe</code> （你的电脑里可能不会显示.exe）</p><p>选择 <strong>以管理员身份运行</strong> ，并且按照指示或者窗口要求一路确认确认确认</p><p>假如软件突然关闭了，并且你的文件夹里多出了很多文件，那么你的 Steamcommunity 已经成功初始化了。</p><h4 id="Step-II-运行-Steamcommunity"><a href="#Step-II-运行-Steamcommunity" class="headerlink" title="Step II 运行 Steamcommunity"></a><em>Step II</em> 运行 Steamcommunity</h4><p>首先，左键双击 <code>steamcommunity.exe</code> （就是刚才那个软件）</p><p>接下来，点击弹出窗口中的 <code>设置</code> <strong>推荐</strong>勾选左上角的 <code>开机自动运行</code> <code>自动启动服务</code></p><p>接着在本地反代服务选择中<strong>推荐</strong>勾选除了 <code>微软商店/XBOX图片修复</code> 以外的所有复选框</p><p>之后点击右手边的 <code>保存设置</code> <strong>现在，你的 Steamcommunity 已经准备就绪了！</strong></p><h4 id="Step-III-正式开始使用你的-Steamcommunity"><a href="#Step-III-正式开始使用你的-Steamcommunity" class="headerlink" title="Step III 正式开始使用你的 Steamcommunity"></a><em>Step III</em> 正式开始使用你的 Steamcommunity</h4><p>再次左键双击打开 <code>steamcommunity.exe</code> </p><p>这时你的软件会自动开始工作并且过一会隐藏在后台。你已经可以正常访问 Steam 上的所有功能了！</p><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><p>刚刚的教程里为 Steamcommunity 设置了开机自启动，即你每次开机时它会自行启动并开始服务，实现全自动管理。</p><p>因为它消耗的资源极少，所以完全不影响性能。不必担心拖慢你的电脑。</p><h2 id="mathscr-B-UsbEAm-Hosts-Editor-操作指南"><a href="#mathscr-B-UsbEAm-Hosts-Editor-操作指南" class="headerlink" title="$ \mathscr{B} $ UsbEAm Hosts Editor 操作指南"></a>$ \mathscr{B} $ UsbEAm Hosts Editor 操作指南</h2><div class="note info modern"><p>本部分教程并非保姆级教学，即默认你已经具备基本的计算机常识。如果你只是想访问 Steam 社区服务，请遵循 <em>$ \mathscr{A} $ Steam访问 // Steamcommunity</em></p></div><h3 id="Hosts-简介"><a href="#Hosts-简介" class="headerlink" title="Hosts 简介"></a>Hosts 简介</h3><p><strong>Hosts</strong> 是一个没有扩展名的系统文件，主要作用是定义 IP 地址和主机名的映射关系，是一个映射 IP 地址和主机名的规定。当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从 Hosts 文件中寻找对应的 IP 地址，一旦找到，浏览器会立即打开对应网页，如果没有找到，则浏览器会将网址提交 DNS 服务器进行 IP 地址解析。Hosts 文件可以用文本文件打开！修改电脑和手机 Hosts 文件，可以绕过 DNS 为域名指定正确的 IP 地址，这也是快速打开网页的方法</p><h3 id="UsbEAm-Host-Editor-简介"><a href="#UsbEAm-Host-Editor-简介" class="headerlink" title="UsbEAm Host Editor 简介"></a>UsbEAm Host Editor 简介</h3><p>UsbEAm Hosts Editor 是一款由 羽翼城|Dogfight360 自主开发的绿色免费、功能实用的多平台 Hosts 修改工具。以下是它的主要功能和特点：</p><h4 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h4><ol><li><p><strong>加速游戏平台访问</strong>：通过修改 Hosts 文件，可以显著提升 Steam、Origin、Uplay 等游戏平台的下载速度。</p></li><li><p><strong>解决网络错误</strong>：能够有效解决游戏平台或游戏本身出现的网络连接问题。</p></li><li><p><strong>编辑 Hosts 文件</strong>：用户可以直接通过该工具编辑计算机中的 Hosts 文件，方便管理域名和 IP 地址的映射关系。</p></li><li><p><strong>智能检测延迟</strong>：支持检测本机到服务器的 IP 延迟，帮助用户选择最优的 IP 地址。</p></li><li><p><strong>批量处理</strong>：可以一次性处理多个 Hosts 文件，提高工作效率。</p></li><li><p><strong>清除规则</strong>：用户可以清除已写入的规则，或手动编辑 Hosts 文件。</p><p>详情请戳 $\Rightarrow$ <strong><a href="https://www.dogfight360.com/blog/">羽翼城|Dogfight360佬的个人博客</a></strong></p><p>有关于 UsbEAm Hosts Editor 的页面，请戳 $\Rightarrow$ <a href="https://www.dogfight360.com/blog/18627/">UsbEAm Hosts Editor [多平台hosts修改] V4.0.1</a></p></li></ol><h3 id="UsbEAm-Hosts-Editor-下载"><a href="#UsbEAm-Hosts-Editor-下载" class="headerlink" title="UsbEAm Hosts Editor 下载"></a>UsbEAm Hosts Editor 下载</h3><p><img src="https://www.dogfight360.com/blog/wp-content/uploads/2025/01/chrome_OdhhQVuhGX-2.png" alt="图源：羽翼城官方博客"> </p><blockquote><p>图源 羽翼城大佬的官方博客</p></blockquote><p>下载链接 <a href="https://wwid.lanzouw.com/igHUi2mhbqdc">UsbEAm Hosts Editor [多平台hosts修改] V4.0.1下载</a> </p><div class="note warning modern"><p>本教程默认你已经具备解压缩能力，请不要将文件盲目存放于 C 盘。关于解压缩可以参考 <em>$ \mathscr{A} $ Steam访问 // Steamcommunity</em> </p></div><p>下载好后将压缩包内文件统一在一个地址下，在本教程中，默认这个位置是 <strong>D:\UsbEAm</strong> </p><h3 id="UsbEAm-Hosts-Editor-使用"><a href="#UsbEAm-Hosts-Editor-使用" class="headerlink" title="UsbEAm Hosts Editor 使用"></a>UsbEAm Hosts Editor 使用</h3><h4 id="Step-I-选择服务"><a href="#Step-I-选择服务" class="headerlink" title="Step I 选择服务"></a><em>Step I</em> 选择服务</h4><p>首先明确自己希望访问的服务，例如我要访问 Steam 社区服务。</p><p>双击打开 <code>D:\UsbEam\UsbEAm Hosts Editor.exe</code> 可以看到上图所示页面</p><p>点击左下角手柄图标，找到菜单中的 <strong>Steam</strong> 再在子目录下选择 <code>社区 - 图片/视频/CSS/JS脚本</code> 中的第一个</p><p>可以按照下面的步骤操作，然后如法设置剩下的三个。</p><h4 id="Step-II-选择IP"><a href="#Step-II-选择IP" class="headerlink" title="Step II 选择IP"></a><em>Step II</em> 选择IP</h4><p>在你选定服务后，左边的服务器栏里面会出现许多服务商/地点和IP</p><p>点击界面下方的 <code>检测延迟</code> 按钮 这时服务器列表会根据延迟大小自动排序，最上面的是延迟最小的。</p><p>我们选中延迟合适的服务器，点击界面下方的 <code>应用选中</code> 按钮，软件会自动开始配置。</p><p><strong>到这一步，你已经能够访问刚刚解锁的服务了。</strong></p><h3 id="补充说明-1"><a href="#补充说明-1" class="headerlink" title="补充说明"></a>补充说明</h3><p>由于众多 IP 时常会不稳定，因此修改完 Hosts 之后如果又遇到无法访问的问题，请再次打开对应的服务，点击 <code>清除当前</code> 然后如法再次选定合理的 IP。</p><h2 id="mathscr-C-为你的-Steamcommunity-或者-UsbEAm-创建快捷方式"><a href="#mathscr-C-为你的-Steamcommunity-或者-UsbEAm-创建快捷方式" class="headerlink" title="$\mathscr{C}$ 为你的 Steamcommunity 或者 UsbEAm 创建快捷方式"></a>$\mathscr{C}$ 为你的 Steamcommunity 或者 UsbEAm 创建快捷方式</h2><h3 id="什么是快捷方式？"><a href="#什么是快捷方式？" class="headerlink" title="什么是快捷方式？"></a>什么是快捷方式？</h3><p>快捷方式（Shortcut）是一种指向计算机上某个文件、文件夹、程序或网页的链接，它本身并不是目标对象，而是一个指向目标对象的“指针”。通过快捷方式，用户可以快速访问常用的应用程序、文件或文件夹，而无需每次都通过复杂的路径查找。</p><p>以下是快捷方式的主要特点和用途：</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><strong>轻量级</strong>：快捷方式文件通常只有几 KB 大小，不会占用太多磁盘空间。</li><li><strong>可移动性</strong>：可以将快捷方式放在桌面、任务栏、开始菜单或任何方便的位置。</li><li><strong>独立性</strong>：即使快捷方式被删除或移动，原始文件或程序仍然存在，不受影响。</li><li><strong>自定义性</strong>：用户可以为快捷方式设置图标、快捷键等属性。</li></ol><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ol><li><strong>快速启动程序</strong>：将常用软件的快捷方式放在桌面或任务栏，方便快速启动。</li><li><strong>访问文件和文件夹</strong>：创建指向重要文件或文件夹的快捷方式，方便快速访问。</li><li><strong>启动带参数的程序</strong>：通过快捷方式的属性设置，可以在启动程序时附加特定的命令行参数。</li><li><strong>网络链接</strong>：可以创建指向网络资源（如网页、网络驱动器等）的快捷方式。</li></ol><h3 id="为什么要创建快捷方式？"><a href="#为什么要创建快捷方式？" class="headerlink" title="为什么要创建快捷方式？"></a>为什么要创建快捷方式？</h3><p>软件被分放在硬盘里错综复杂的目录中，每次打开软件之前都要去硬盘里面找它们是非常麻烦的。创建快捷方式后，你可以从桌面快速访问它们。</p><p>尤其是对于 Steamcommunity 302 ，它有的时候会运行一半在后台突然消失，这时需要你手动再次启动它。创建一个快捷方式就显得尤为方便。</p><h3 id="如何创建快捷方式？"><a href="#如何创建快捷方式？" class="headerlink" title="如何创建快捷方式？"></a>如何创建快捷方式？</h3><h4 id="Step-I-快捷方式的创建"><a href="#Step-I-快捷方式的创建" class="headerlink" title="Step I 快捷方式的创建"></a><em>Step I</em> 快捷方式的创建</h4><p>打开刚刚下载软件的文件夹，例如 <code>D:\Steamcommunity302</code> 或者 <code>E:\UsbEAm</code> ，找到刚刚打开的那个红色图标的软件。</p><p><strong>右键点击那个文件</strong>，在弹出的二级菜单内找到 <code>创建快捷方式</code>，<strong>左键点击它</strong>。</p><p>如果你看到文件夹里多出了一个右下角带箭头的文件，它就是你刚刚生成的快捷方式。</p><h4 id="Step-II-快捷方式的使用"><a href="#Step-II-快捷方式的使用" class="headerlink" title="Step II 快捷方式的使用"></a><em>Step II</em> 快捷方式的使用</h4><p>点击刚刚生成的 <strong>快捷方式</strong> （注意不是原软件）</p><p>同时按下键盘上的 <code>Ctrl</code> 键和 <code>X</code> 键</p><p>如果你的操作正确，可以看到快捷方式的图标似乎变得透明了一些。</p><p>之后回到电脑桌面，同时按下键盘上的 <code>Ctrl</code> 键和 <code>V</code> 键，如果你看到桌面上出现了刚刚的快捷方式，那么你成功地将它移动到了桌面上。</p><p>现在双击那个图标，你会发现对应的软件开始运行了。如此，你简单掌握了快捷方式的使用。日后在使用其它软件的时候也可以如法炮制，令你的软件使用变得得心应手。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这是我第一次写教程，如果有不够详尽的地方请见谅，你可以向我的邮箱发送邮件或者在下方评论区里进行评论。</p><p>非常高兴能够帮助到你。</p>]]></content>
      
      
      <categories>
          
          <category> ~万灵册~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Game </tag>
            
            <tag> Tech </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HustLuoguLanguageI</title>
      <link href="/2025/02/08/HustLuoguLanguageI.html"/>
      <url>/2025/02/08/HustLuoguLanguageI.html</url>
      
        <content type="html"><![CDATA[<h1 id="HUSTCS-NNZDQZRC-题解-答案分享-A-Z"><a href="#HUSTCS-NNZDQZRC-题解-答案分享-A-Z" class="headerlink" title="HUSTCS NNZDQZRC 题解/答案分享(A-Z)"></a>HUSTCS NNZDQZRC 题解/答案分享(A-Z)</h1><div class="note info modern"><p><strong>请注意</strong> 本题解暂时仅收录本人已经完成的题目，仅供参考，请勿直接抄袭~</p><p>本人码风非常凌乱且前7题是C后面都是C++ 具体语言类型已经标注到题目标题后面~</p><p>如果你也希望提供自己的题解/想法可以直接把代码copy到评论区~欢迎各种做法/语言qwq</p></div><h2 id="mathscr-A-小L在吃饭-hasmeal"><a href="#mathscr-A-小L在吃饭-hasmeal" class="headerlink" title="\mathscr{A} 小L在吃饭 ( hasmeal )"></a><script type="math/tex">\mathscr{A}</script> 小L在吃饭 ( hasmeal )</h2><p>用 float 非常浪费资源，在签到题上没必要。本题直接将角作为单位即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a,b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d %d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="type">int</span> c = (<span class="number">10</span> * a + b) / <span class="number">19</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,c);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-B-小W在游泳-swim"><a href="#mathscr-B-小W在游泳-swim" class="headerlink" title="\mathscr{B} 小W在游泳 ( swim )"></a><script type="math/tex">\mathscr{B}</script> 小W在游泳 ( swim )</h2><p>因为有98%所以开了 float ，用 sum 进行叠加即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> s, x = <span class="number">2.0</span>, sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;s);</span><br><span class="line"><span class="keyword">while</span> (sum &lt; s)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line">sum += x;</span><br><span class="line">x *= <span class="number">0.98</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-C-小C在上课-finalscore"><a href="#mathscr-C-小C在上课-finalscore" class="headerlink" title="\mathscr{C} 小C在上课 ( finalscore )"></a><script type="math/tex">\mathscr{C}</script> 小C在上课 ( finalscore )</h2><p>注意到subtask 对于 <script type="math/tex">100\%</script> 的数据 <script type="math/tex">A,B,C</script> 均为 <script type="math/tex">10</script> 的倍数，因此直接当 int 算即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> A, B, C;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;A, &amp;B, &amp;C);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, A / <span class="number">5</span> + B / <span class="number">10</span> * <span class="number">3</span> + C / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-D-好数-gnum"><a href="#mathscr-D-好数-gnum" class="headerlink" title="\mathscr{D} 好数 ( gnum )"></a><script type="math/tex">\mathscr{D}</script> 好数 ( gnum )</h2><p>四个情况对应 <script type="math/tex">2^4</script> 种情况，一个一个判断显然太慢了，我们用两个数把输入性质的真值存下来就好</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x, a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">a = (x/<span class="number">2</span>*<span class="number">2</span> == x);</span><br><span class="line">b = x &gt; <span class="number">4</span> &amp;&amp; x &lt;= <span class="number">12</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, (a&amp;&amp;b),(a||b),(a^b),!(a||b));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-E-排序-sort"><a href="#mathscr-E-排序-sort" class="headerlink" title="\mathscr{E} 排序 ( sort )"></a><script type="math/tex">\mathscr{E}</script> 排序 ( sort )</h2><p>进行了一个毫无技术含量的冒泡排序</p><p>各种排序方法详情学习： <strong><a href="https://oi-wiki.org/basic/sort-intro/">OI Wiki - 排序简介</a></strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;a[<span class="number">0</span>], &amp;a[<span class="number">1</span>], &amp;a[<span class="number">2</span>]);</span><br><span class="line"><span class="type">int</span> i, j, temp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; <span class="number">3</span> - i + <span class="number">1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &lt; a[j - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">temp = a[j - <span class="number">1</span>];</span><br><span class="line">a[j - <span class="number">1</span>] = a[j];</span><br><span class="line">a[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-F-谁更短-leauingz"><a href="#mathscr-F-谁更短-leauingz" class="headerlink" title="\mathscr{F} 谁更短 ( leauingz )"></a><script type="math/tex">\mathscr{F}</script> 谁更短 ( leauingz )</h2><p>注意到<script type="math/tex">t(items)=\left\{\begin{aligned}3 \ast items + 11, LeauingZ \\5 \ast items,Yourself\end{aligned}\right.</script></p><p>当 <script type="math/tex">items < 5</script> 时，自己出题更快，当 <script type="math/tex">items \ge 6</script> 时，让 LeauingZ 出题更快。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">6</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Local&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Luogu&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-G-倍减-double"><a href="#mathscr-G-倍减-double" class="headerlink" title="\mathscr{G} 倍减 ( double )"></a><script type="math/tex">\mathscr{G}</script> 倍减 ( double )</h2><p>由于 C 语言整数除法本身就是向下取整，因此直接按题意实现即可。</p><p>此处可以将 while 改写成 for 循环。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line"><span class="keyword">while</span>(x != <span class="number">1</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">x /= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-H-有说服力的评分算法-rating"><a href="#mathscr-H-有说服力的评分算法-rating" class="headerlink" title="\mathscr{H} 有说服力的评分算法 ( rating )"></a><script type="math/tex">\mathscr{H}</script> 有说服力的评分算法 ( rating )</h2><p>注意分数应该是浮点型变量，同时需要保留两位小数。</p><p>可以学习从  <em><script type="math/tex">\mathscr{E}</script> 排序 ( sort ) C</em> 学习来的排序方法，对评分数组进行排序。</p><p>但是本题只需要去掉两边各一个极值，因此直接累加并找到需要剪掉的项即可</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> score = <span class="number">0.0</span>;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> max = <span class="number">0</span>,min = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> i,n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;a[i]);</span><br><span class="line">score += a[i];</span><br><span class="line"><span class="keyword">if</span>(max &lt; a[i]) max = a[i];</span><br><span class="line"><span class="keyword">if</span>(min &gt; a[i]) min = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, (score-max-min) / (n - <span class="number">2</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-I-多项式筛素数-poly"><a href="#mathscr-I-多项式筛素数-poly" class="headerlink" title="\mathscr{I} 多项式筛素数 ( poly )"></a><script type="math/tex">\mathscr{I}</script> 多项式筛素数 ( poly )</h2><p>基本思路是从 <script type="math/tex">2</script> 开始创建向上的索引，判断每个索引是不是素数，然后再将是素数的项累加起来判断是不是大于 <script type="math/tex">S</script> 。代码实现的时候图省事把2单独拿出来考虑了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, S = <span class="number">0</span>, sum = <span class="number">2</span>, n = <span class="number">0</span>, status = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;S);</span><br><span class="line"><span class="keyword">if</span>(S &gt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">3</span>; i &lt; <span class="number">5000</span>  &amp;&amp; (sum + i) &lt;= S; i++)</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">2</span>; j &lt; i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == i / j * j)</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">sum += i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-J-数位枚举-enum"><a href="#mathscr-J-数位枚举-enum" class="headerlink" title="\mathscr{J} 数位枚举 ( enum )"></a><script type="math/tex">\mathscr{J}</script> 数位枚举 ( enum )</h2><p>注意到 Subtasks 里面的数据满足 <script type="math/tex">1 \le n \le 10^6</script> ，因此直接在有限的范围内写 if 拆数就可以了2333</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, n, x, t = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;x);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i / <span class="number">1000000</span> == x &amp;&amp; i &gt; <span class="number">999999</span>)</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (i / <span class="number">100000</span> % <span class="number">10</span> == x &amp;&amp; i &gt; <span class="number">99999</span>)</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (i / <span class="number">10000</span> % <span class="number">10</span> == x &amp;&amp; i &gt; <span class="number">9999</span>)</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (i / <span class="number">1000</span> % <span class="number">10</span> == x &amp;&amp; i &gt; <span class="number">999</span>)</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (i / <span class="number">100</span> % <span class="number">10</span> == x &amp;&amp; i &gt; <span class="number">99</span>)</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (i / <span class="number">10</span> % <span class="number">10</span> == x &amp;&amp; i &gt; <span class="number">9</span>)</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">10</span> == x)</span><br><span class="line">t++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, t);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-K-阅读论文-read"><a href="#mathscr-K-阅读论文-read" class="headerlink" title="\mathscr{K} 阅读论文 ( read )"></a><script type="math/tex">\mathscr{K}</script> 阅读论文 ( read )</h2><p>根据 <script type="math/tex">Hints</script> ，我们首先要区分 没有存储元素的位置 和 存放了 <script type="math/tex">0</script> 的位置。因此在初始化的时候为数组置-1.</p><p>这一步可以拿memset()函数快速完成。</p><p>之后查找论文里有没有已知的公式。</p><p>如果有 <script type="math/tex">\Rightarrow</script> 继续下一个</p><p>如果没有 <script type="math/tex">\Rightarrow</script> 在笔记本里记录，同时计数器自增。</p><p>我们用一个类似于指针的东西记录下一个要记录的页码即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> Mi, Ni, M[<span class="number">1001</span>], N[<span class="number">1001</span>], i, j, check_time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">M[i] = <span class="number">-1</span>;</span><br><span class="line">N[i] = <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="comment">// MNP置-1</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;Mi, &amp;Ni);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Ni; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;N[i]);</span><br><span class="line"><span class="type">int</span> index = <span class="number">0</span>, status = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; Ni; i++)</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Mi; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (N[i] == M[j])</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (index == Mi)</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">M[index] = N[i];</span><br><span class="line">index++;</span><br><span class="line">check_time++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, check_time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-L-在线购物-shopping"><a href="#mathscr-L-在线购物-shopping" class="headerlink" title="\mathscr{L} 在线购物 ( shopping )"></a><script type="math/tex">\mathscr{L}</script> 在线购物 ( shopping )</h2><p>从本题开始全部由 C++ 编写，因为它提供了众多功能强大的 STL 容器以及 string 类型。</p><p>当然本题其实还是个数学问题 直接取模做就好。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">an</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> code;</span><br><span class="line">&#125; Ni;<span class="comment">//回看补充 就一个int我为什么要定义一个struct/捂脸</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">aq</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> length;</span><br><span class="line"><span class="type">int</span> recode;</span><br><span class="line">&#125; Qi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, q, i;</span><br><span class="line">Ni N[<span class="number">1000</span>];</span><br><span class="line">Qi Q[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;q);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;N[i].code);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; q; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d %d&quot;</span>, &amp;Q[i].length, &amp;Q[i].recode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> cmp = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i++)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="built_in">pow</span>(<span class="number">10</span>, Q[i].length);</span><br><span class="line">cmp = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (N[j].code % c == Q[i].recode &amp;&amp; N[j].code &lt; cmp)</span><br><span class="line">cmp = N[j].code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (cmp == <span class="number">1000000000</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, cmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-M-lhm-玩-01-lhma"><a href="#mathscr-M-lhm-玩-01-lhma" class="headerlink" title="\mathscr{M} lhm 玩 01 ( lhma )"></a><script type="math/tex">\mathscr{M}</script> lhm 玩 01 ( lhma )</h2><p>本题是学长相互迫害的开端哈哈</p><p>我们把输出 <script type="math/tex">0</script> 和 <script type="math/tex">1</script> 作为两种状态，然后一次处理即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i, j, a, b = <span class="number">0</span>, index = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;j);</span><br><span class="line"><span class="keyword">while</span> (sum &lt; j * j)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;i);</span><br><span class="line">sum += i;</span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">0</span>; a &lt; i; a++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span> (index % j == <span class="number">0</span> &amp;&amp; index != <span class="number">0</span> &amp;&amp; index != j * j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">b = <span class="number">1</span> - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-N-bngg-与-hmgg-的决斗-fight"><a href="#mathscr-N-bngg-与-hmgg-的决斗-fight" class="headerlink" title="\mathscr{N} bngg 与 hmgg 的决斗 ( fight )"></a><script type="math/tex">\mathscr{N}</script> bngg 与 hmgg 的决斗 ( fight )</h2><p>注意本题只保证每一个节点 <script type="math/tex">s_i < 10^9</script> ，因此累加时要开 <em>long long</em> 。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> c[<span class="number">100000</span>];</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> m, p1, s1, s2;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> p2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %lld&quot;</span>, &amp;m);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %lld&quot;</span>, &amp;p1);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %lld&quot;</span>, &amp;s1);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %lld&quot;</span>, &amp;s2);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> k1 = <span class="number">0</span>, k2 = <span class="number">0</span>, temp = <span class="number">100000000000000000</span>, tag;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">k1 += c[i] * (m - <span class="number">1</span> - i);</span><br><span class="line">&#125;</span><br><span class="line">k1 += (m - p1) * s1;</span><br><span class="line"><span class="keyword">for</span> (p2 = <span class="number">0</span>; p2 &lt; n; p2++)</span><br><span class="line">&#123;</span><br><span class="line">k2 = <span class="built_in">abs</span>(k1 + (m - <span class="number">1</span> - p2) * s2);</span><br><span class="line"><span class="keyword">if</span> (temp &gt; k2)</span><br><span class="line">&#123;</span><br><span class="line">temp = k2;</span><br><span class="line">tag = p2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, tag + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-O-lhm-玩数字-lhmb"><a href="#mathscr-O-lhm-玩数字-lhmb" class="headerlink" title="\mathscr{O} lhm 玩数字 ( lhmb )"></a><script type="math/tex">\mathscr{O}</script> lhm 玩数字 ( lhmb )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> temp = *a;</span><br><span class="line">*a = *b;</span><br><span class="line">*b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Bs</span><span class="params">(<span class="type">int</span> c[], <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; n - i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[j] &lt; c[j - <span class="number">1</span>])</span><br><span class="line"><span class="built_in">swap</span>(&amp;c[j], &amp;c[j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"><span class="type">int</span> c[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; c[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Bs</span>(c, n);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c[i] != c[i - <span class="number">1</span>])</span><br><span class="line">tag++;</span><br><span class="line"><span class="keyword">if</span> (tag == k) &#123;</span><br><span class="line">cout &lt;&lt; c[i];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tag &lt; k)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;NO RESULT&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-P-小-S-与-NLP-nlp"><a href="#mathscr-P-小-S-与-NLP-nlp" class="headerlink" title="\mathscr{P} 小 S 与 NLP ( nlp )"></a><script type="math/tex">\mathscr{P}</script> 小 S 与 NLP ( nlp )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">unordered_map&lt;string, <span class="type">int</span>&gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">&#123;</span><br><span class="line">string key;</span><br><span class="line"><span class="type">int</span> val;</span><br><span class="line">cin &gt;&gt; key &gt;&gt; val;</span><br><span class="line">dict[key] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cin.<span class="built_in">ignore</span>(<span class="number">1000</span>, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">&#123;</span><br><span class="line">string m1;</span><br><span class="line"><span class="built_in">getline</span>(cin, m1);</span><br><span class="line">string m2;</span><br><span class="line"><span class="type">bool</span> status = <span class="literal">false</span>;</span><br><span class="line">string current_key;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : m1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="literal">true</span>;</span><br><span class="line">current_key.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">status = <span class="literal">false</span>;</span><br><span class="line">m2 += <span class="built_in">to_string</span>(dict[current_key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (status)</span><br><span class="line">&#123;</span><br><span class="line">current_key += c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">m2 += c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; m2 &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-Q-小-S-与-MMORPG-mmorpg"><a href="#mathscr-Q-小-S-与-MMORPG-mmorpg" class="headerlink" title="\mathscr{Q} 小 S 与 MMORPG ( mmorpg )"></a><script type="math/tex">\mathscr{Q}</script> 小 S 与 MMORPG ( mmorpg )</h2><p>至理名言</p><blockquote><p>如果你不知道什么是 MMORPG，你可以将其简单理解为 Many Men Online Role Playing as Girls 的缩写。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">set&lt;string&gt; s;</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line">string w;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; w;</span><br><span class="line">s.<span class="built_in">insert</span>(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; w;</span><br><span class="line">s.<span class="built_in">erase</span>(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; w;</span><br><span class="line">s.<span class="built_in">insert</span>(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (string c : s)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-R-小-S-与时间逆流-time"><a href="#mathscr-R-小-S-与时间逆流-time" class="headerlink" title="\mathscr{R} 小 S 与时间逆流 ( time )"></a><script type="math/tex">\mathscr{R}</script> 小 S 与时间逆流 ( time )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getlength</span><span class="params">(<span class="type">char</span> *c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (c[p] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> w[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">memset</span>(w, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">cin &gt;&gt; w;</span><br><span class="line">multiset&lt;string&gt; ms;</span><br><span class="line"><span class="type">int</span> i, j, a, b;</span><br><span class="line"><span class="type">char</span> w2[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> wlength;</span><br><span class="line">wlength = <span class="built_in">getlength</span>(w);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; wlength; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = wlength - <span class="number">1</span>; j &gt; i; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">100</span>; k++)</span><br><span class="line">w2[k] = w[k];</span><br><span class="line">a = i;</span><br><span class="line">b = j;</span><br><span class="line"><span class="keyword">while</span> (a &lt; b)</span><br><span class="line">&#123;</span><br><span class="line">w2[a] = w[b];</span><br><span class="line">w2[b] = w[a];</span><br><span class="line">a++;</span><br><span class="line">b--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(w2, wlength)</span></span>;</span><br><span class="line">ms.<span class="built_in">insert</span>(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">str</span><span class="params">(w,wlength)</span></span>;</span><br><span class="line">ms.<span class="built_in">insert</span>(str);</span><br><span class="line">cout &lt;&lt; *(ms.<span class="built_in">begin</span>());</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-S-小-S-与-历史长河-history"><a href="#mathscr-S-小-S-与-历史长河-history" class="headerlink" title="\mathscr{S} 小 S 与 历史长河 ( history )"></a><script type="math/tex">\mathscr{S}</script> 小 S 与 历史长河 ( history )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string S, S1, T, T1;</span><br><span class="line">cin &gt;&gt; S &gt;&gt; T;</span><br><span class="line"><span class="type">int</span> Q;</span><br><span class="line">cin &gt;&gt; Q;</span><br><span class="line"><span class="type">int</span> ls, rs, lt, rt;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Q; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; ls &gt;&gt; rs &gt;&gt; lt &gt;&gt; rt;</span><br><span class="line"><span class="function">string <span class="title">S1</span><span class="params">(S, ls - <span class="number">1</span>, rs - ls + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">T1</span><span class="params">(T, lt - <span class="number">1</span>, rt - lt + <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (S1 &lt; T1)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;yifusuyi&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (S1 &gt; T1)</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;erfusuer&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;ovo&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-T-任务管理-task"><a href="#mathscr-T-任务管理-task" class="headerlink" title="\mathscr{T} 任务管理 ( task )"></a><script type="math/tex">\mathscr{T}</script> 任务管理 ( task )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tasks[<span class="number">5000</span>][<span class="number">5000</span>];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; lists;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; tasks[b - <span class="number">1</span>][<span class="number">0</span>]; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (lists.<span class="built_in">find</span>(tasks[b - <span class="number">1</span>][i + <span class="number">1</span>]) == lists.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">lists.<span class="built_in">insert</span>(tasks[b - <span class="number">1</span>][i + <span class="number">1</span>]);</span><br><span class="line"><span class="built_in">check</span>(tasks[b - <span class="number">1</span>][i + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line">cin &gt;&gt; N;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; tasks[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; tasks[i][<span class="number">0</span>]; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tasks[i][j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">check</span>(<span class="number">1</span>);</span><br><span class="line">cout &lt;&lt; lists.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-U-直接输出-output"><a href="#mathscr-U-直接输出-output" class="headerlink" title="\mathscr{U} 直接输出 ( output )"></a><script type="math/tex">\mathscr{U}</script> 直接输出 ( output )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">de</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">string output = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> k[<span class="number">16</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">bool</span> status = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sum != n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= n - sum)</span><br><span class="line">&#123;</span><br><span class="line">i *= <span class="number">2</span>;</span><br><span class="line">counter++;</span><br><span class="line">&#125;</span><br><span class="line">k[counter - <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">sum += (i / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">15</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (k[j] == <span class="number">1</span> &amp;&amp; j != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (status)</span><br><span class="line">output += <span class="string">&quot;+&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (j != <span class="number">1</span>)</span><br><span class="line">output += <span class="string">&quot;2(&quot;</span> + <span class="built_in">de</span>(j) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">output += <span class="string">&quot;2&quot;</span>;</span><br><span class="line">status = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k[j] == <span class="number">1</span> &amp;&amp; j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (status)</span><br><span class="line">output += <span class="string">&quot;+&quot;</span>;</span><br><span class="line">output += <span class="string">&quot;2(0)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">cout &lt;&lt; <span class="built_in">de</span>(n);</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-V-走-walk"><a href="#mathscr-V-走-walk" class="headerlink" title="\mathscr{V} 走 ( walk )"></a><script type="math/tex">\mathscr{V}</script> 走 ( walk )</h2><blockquote><p>这不是题解，只是一份无厘头的错误代码。本题还没通过，太困难了qwq</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> m_used = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> color = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> qp[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> coin = <span class="number">-1</span>;</span><br><span class="line">set&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; his;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; bill;</span><br><span class="line"><span class="type">int</span> recorder[<span class="number">10000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> turn = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pos = <span class="built_in">make_pair</span>(x, y);</span><br><span class="line"><span class="keyword">if</span>(his.<span class="built_in">find</span>(pos) == his.<span class="built_in">end</span>()) &#123;his.<span class="built_in">insert</span>(pos);&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">color = qp[y - <span class="number">1</span>][x - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(color != <span class="number">-1</span>) m_used = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(m_used == <span class="number">0</span> &amp;&amp; color == <span class="number">-1</span>) m_used = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(m_used &amp;&amp; color == <span class="number">-1</span>) &#123; his.<span class="built_in">erase</span>(pos); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &lt;= <span class="number">0</span> || x &gt;= m + <span class="number">1</span> || y &lt;= <span class="number">0</span> || y &gt;= m + <span class="number">1</span>) &#123;his.<span class="built_in">erase</span>(pos); <span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == m &amp;&amp; y == m) &#123;<span class="keyword">return</span> <span class="number">1</span>;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(x - <span class="number">1</span>, y)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; m &amp;&amp; <span class="built_in">check</span>(x + <span class="number">1</span>, y)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (y &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">check</span>(x, y - <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (y &lt; m &amp;&amp; <span class="built_in">check</span>(x, y + <span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">his.<span class="built_in">erase</span>(pos);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(qp, <span class="number">-1</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">cin &gt;&gt; qp[y - <span class="number">1</span>][x - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">check</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-W-选择-choose"><a href="#mathscr-W-选择-choose" class="headerlink" title="\mathscr{W} 选择 ( choose )"></a><script type="math/tex">\mathscr{W}</script> 选择 ( choose )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> used[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> com[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> x[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += com[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check_prime</span><span class="params">(<span class="type">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(num); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">comGet</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> layer)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (layer == k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">check_prime</span>(<span class="built_in">sum</span>()))</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = start; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!used[i])</span><br><span class="line">&#123;</span><br><span class="line">used[i] = <span class="literal">true</span>;</span><br><span class="line">com[layer] = x[i];</span><br><span class="line"><span class="built_in">comGet</span>(i + <span class="number">1</span>, layer + <span class="number">1</span>);</span><br><span class="line">used[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; x[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">comGet</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-X-大物要挂了-nnzdqzrc"><a href="#mathscr-X-大物要挂了-nnzdqzrc" class="headerlink" title="\mathscr{X} 大物要挂了 ( nnzdqzrc )"></a><script type="math/tex">\mathscr{X}</script> 大物要挂了 ( nnzdqzrc )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> s1, s2, s3, s4;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; total;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">man</span><span class="params">(<span class="number">2</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt; man, <span class="type">int</span> er, <span class="type">int</span> layer, vector&lt;<span class="type">int</span>&gt; &amp;sub)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> top = sub.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (layer == top)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">max</span>(man[<span class="number">0</span>], man[<span class="number">1</span>]);</span><br><span class="line">total.<span class="built_in">insert</span>(a);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (layer != <span class="number">-1</span>)</span><br><span class="line">man[er] += sub[layer];</span><br><span class="line"><span class="built_in">dfs</span>(man, <span class="number">0</span>, layer + <span class="number">1</span>, sub);</span><br><span class="line"><span class="built_in">dfs</span>(man, <span class="number">1</span>, layer + <span class="number">1</span>, sub);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; s3 &gt;&gt; s4;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">A</span><span class="params">(s1)</span>, <span class="title">B</span><span class="params">(s2)</span>, <span class="title">C</span><span class="params">(s3)</span>, <span class="title">D</span><span class="params">(s4)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s1; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;A[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s2; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;B[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s3; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;C[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s4; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;D[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(man, <span class="number">0</span>, <span class="number">-1</span>, A);</span><br><span class="line"><span class="type">int</span> result = *total.<span class="built_in">begin</span>();</span><br><span class="line">total.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">dfs</span>(man, <span class="number">0</span>, <span class="number">-1</span>, B);</span><br><span class="line">result += *total.<span class="built_in">begin</span>();</span><br><span class="line">total.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">dfs</span>(man, <span class="number">0</span>, <span class="number">-1</span>, C);</span><br><span class="line">result += *total.<span class="built_in">begin</span>();</span><br><span class="line">total.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">dfs</span>(man, <span class="number">0</span>, <span class="number">-1</span>, D);</span><br><span class="line">result += *total.<span class="built_in">begin</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; result;</span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-Y-世界是一个巨大的二分-binary"><a href="#mathscr-Y-世界是一个巨大的二分-binary" class="headerlink" title="\mathscr{Y} 世界是一个巨大的二分 ( binary )"></a><script type="math/tex">\mathscr{Y}</script> 世界是一个巨大的二分 ( binary )</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SuperFunc</span><span class="params">(<span class="type">int</span> option, vector&lt;<span class="type">int</span>&gt; &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator iter1;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;erator iter2;</span><br><span class="line">::it</span><br><span class="line"><span class="type">int</span> x, y, counter = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> length = a.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span> (option == <span class="number">1</span>)</span><br><span class="line">cin &gt;&gt; x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line"><span class="keyword">switch</span> (option)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">iter1 = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x);</span><br><span class="line">iter2 = <span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x);</span><br><span class="line">counter = <span class="built_in">distance</span>(iter1, iter2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">iter1 = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x);</span><br><span class="line">iter2 = <span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), y);</span><br><span class="line">counter = <span class="built_in">distance</span>(iter1, iter2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">iter1 = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x);</span><br><span class="line">iter2 = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), y);</span><br><span class="line">counter = <span class="built_in">distance</span>(iter1, iter2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">iter1 = <span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x);</span><br><span class="line">iter2 = <span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), y);</span><br><span class="line">counter = <span class="built_in">distance</span>(iter1, iter2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">iter1 = <span class="built_in">upper_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), x);</span><br><span class="line">iter2 = <span class="built_in">lower_bound</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>(), y);</span><br><span class="line">counter = <span class="built_in">distance</span>(iter1, iter2);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (counter &lt; <span class="number">0</span>)</span><br><span class="line">counter = <span class="number">0</span>;</span><br><span class="line">cout &lt;&lt; counter &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, m, p;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %d&quot;</span>, &amp;p);</span><br><span class="line"><span class="built_in">SuperFunc</span>(p, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mathscr-Z-方程求解-answer"><a href="#mathscr-Z-方程求解-answer" class="headerlink" title="\mathscr{Z} 方程求解 ( answer )"></a><script type="math/tex">\mathscr{Z}</script> 方程求解 ( answer )</h2><blockquote><p>本题尚未开始做qwq</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;我也不知道咋写的&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>你能做的，岂止如此！</strong></p>]]></content>
      
      
      <categories>
          
          <category> ~万灵册~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HustLuoguLanguageII</title>
      <link href="/2025/02/08/HustLuoguLanguageII.html"/>
      <url>/2025/02/08/HustLuoguLanguageII.html</url>
      
        <content type="html"><![CDATA[<h1 id="HUSTCS-NNZDQZRC-题解-答案分享-AA-AZ"><a href="#HUSTCS-NNZDQZRC-题解-答案分享-AA-AZ" class="headerlink" title="HUSTCS NNZDQZRC 题解/答案分享(AA-AZ)"></a>HUSTCS NNZDQZRC 题解/答案分享(AA-AZ)</h1><blockquote><p><strong>请注意</strong> 本题解暂时仅收录本人已经完成的题目，仅供参考，请勿直接抄袭~</p><p>本人码风非常凌乱且前7题是C后面都是C++ 具体语言类型已经标注到题目标题后面~</p><p>如果你也希望提供自己的题解/想法可以直接把代码copy到评论区~欢迎各种做法/语言qwq</p></blockquote><hr><p>这一部分还没开工 好累哦。。</p>]]></content>
      
      
      <categories>
          
          <category> ~万灵册~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NextThingsNext</title>
      <link href="/2025/02/02/NextThingsNext.html"/>
      <url>/2025/02/02/NextThingsNext.html</url>
      
        <content type="html"><![CDATA[<p>最近要学习、完成的一些事物：</p><h2 id="标准指法练习"><a href="#标准指法练习" class="headerlink" title="标准指法练习"></a>标准指法练习</h2><h2 id="C-Primer-Plus-amp-amp-C-进阶"><a href="#C-Primer-Plus-amp-amp-C-进阶" class="headerlink" title="C++ Primer Plus &amp;&amp; C++进阶"></a>C++ Primer Plus &amp;&amp; C++进阶</h2><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h2 id="洛谷题单-amp-amp-题解"><a href="#洛谷题单-amp-amp-题解" class="headerlink" title="洛谷题单 &amp;&amp; 题解"></a>洛谷题单 &amp;&amp; 题解</h2><h2 id="博客新开的坑"><a href="#博客新开的坑" class="headerlink" title="博客新开的坑"></a>博客新开的坑</h2><hr>]]></content>
      
      
      <categories>
          
          <category> ~思想录~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RainOfLeben_001</title>
      <link href="/2025/01/29/RainOfLeben-001.html"/>
      <url>/2025/01/29/RainOfLeben-001.html</url>
      
        <content type="html"><![CDATA[<p><em>May you, the god of leben, saves my life?</em></p>]]></content>
      
      
      <categories>
          
          <category> ~思想录~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CppPrimerPlus</title>
      <link href="/2025/01/29/CppPrimerPlus.html"/>
      <url>/2025/01/29/CppPrimerPlus.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-Primer-Plus-学习笔记"><a href="#C-Primer-Plus-学习笔记" class="headerlink" title="C++ Primer Plus 学习笔记"></a>C++ Primer Plus 学习笔记</h1><blockquote><p>先开个坑 后续持续施工~</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> ~万灵册~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>katex_test</title>
      <link href="/2025/01/26/katex-test.html"/>
      <url>/2025/01/26/katex-test.html</url>
      
        <content type="html"><![CDATA[<script type="math/tex; mode=display">\mathring{g}</script><script type="math/tex; mode=display">\begin{pmatrix}  a & b \\  c & d\end{pmatrix}</script><p><strong>数学公式渲染一切正常~</strong></p><hr>]]></content>
      
      
      <categories>
          
          <category> ~测试集~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Post-000</title>
      <link href="/2025/01/20/Post-000.html"/>
      <url>/2025/01/20/Post-000.html</url>
      
        <content type="html"><![CDATA[<p>你好！这里是<em>Nakano_mk</em>。</p><p><strong>非常高兴现在你能看到这个网站正常运行的样子</strong>。我非常想知道你对这个网站的看法如何，或者由你本人为我发送你在浏览这个页面的截图！</p><p>不论如何，能够看到自己在短时间内学会的东西立竿见影的为我带来满足与收获，这已经足以让我兴奋不已。</p><p>这个博客最初是在我回家那天搭建的。在候机的三个小时里，我经历了产生”是时候做个个人博客了“的想法、在互联网上寻找知识&amp;结合先前了解的一些知识、沿着路线顺利建站——这样一个完整而奇妙的过程。在候机厅里把笔记本放在腿上敲一敲，在世界的每一个地方——只要存在互联网，你的影响就能穿透到那里——这是一种美妙无比的感受，我觉得屏幕前的你也能感同身受！</p><p>为了更加舒服的写这篇markdown，我还购买了高中时期就一直想买的<strong><em>Typora</em></strong>。其实这个软件也并不昂贵，不知道为啥我忍了这么久才买哈哈。</p><p>非常感谢你能看到这里。我会在空闲时间学习一些搭建博客的技巧，相信未来这个博客能够变得更加成熟。</p><blockquote><p>Jan 25, 2025</p><p>In Tianjin</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ~思想录~ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闲谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/01/20/hello-world.html"/>
      <url>/2025/01/20/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
